import java.io.File;
import java.io.FileNotFoundException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;
import java.util.Scanner;

import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextArea;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.FileChooser;

public class RcpttRunnerController  implements Initializable, EventHandler<ActionEvent>/*,  ,ChangeListener*/{

	@FXML
	private TableView<TableModel> tcTable;

	@FXML
	private TableColumn<TableModel, Boolean> checkBox;

	@FXML
	private TableColumn<TableModel, String> name;

	@FXML
	private TableColumn<TableModel, String> count;

	@FXML
	private CheckBox bvtCheck;

	@FXML
	private CheckBox platform30Check;

	@FXML
	private CheckBox platform24Check;

	@FXML
	private CheckBox platform232Check;

	@FXML
	private CheckBox platform231Check;

	@FXML
	private CheckBox platformCommonCheck;

	@FXML
	private CheckBox selectAllCheck;

	@FXML
	private Button loadBtn;

	@FXML
	private Button saveBtn;

	@FXML
	private Button refreshBtn;
	
	@FXML
	private Button settingsBtn;

	@FXML
	private TextArea console;

	@Override
	public void initialize(URL location, ResourceBundle resources) {

		count.setStyle("-fx-alignment: CENTER;");
		
//		build.setStyle("-fx-alignment: CENTER;");
//		install.setStyle("-fx-alignment: CENTER;");
//		launch.setStyle("-fx-alignment: CENTER;");
//		exploratory.setStyle("-fx-alignment: CENTER;");
//		close.setStyle("-fx-alignment: CENTER;");
//		uninstall.setStyle("-fx-alignment: CENTER;");
//		crash.setStyle("-fx-alignment: CENTER;");
//		
//		
//		
		bvtCheck.setOnAction(this);
//		//		launchCheck.setOnAction(this);
//		//		exploratoryCheck.setOnAction(this);
//		//		uninstallCheck.setOnAction(this);
//		//		closeCheck.setOnAction(this);
//		//		crashCheck.setOnAction(this);
//		//		
//		selectAllCheck.setOnAction(new EventHandler<ActionEvent>() {
//			@Override
//			public void handle(ActionEvent event) {
//				CheckBox chk = (CheckBox) event.getSource();
//				if (chk instanceof CheckBox) {
//					boolean isSelected = chk.selectedProperty().getValue();
//					checkAllTableRow(isSelected);
//				
//				}
//			}
//
//		});
//		
		bvtCheck.setSelected(true);
		platform30Check.setSelected(true);
		platform24Check.setSelected(true);
		platform232Check.setSelected(true);
		platform231Check.setSelected(true);
		platformCommonCheck.setSelected(true);
		
		name.setCellValueFactory(new PropertyValueFactory<TableModel, String>("name"));
		
		count.setCellValueFactory(new PropertyValueFactory<TableModel, String>("count"));
//		
//		requiredVersion.setCellValueFactory(new PropertyValueFactory<TableModel, String>("requiredVersion"));
//		
//		appName.setCellValueFactory(new PropertyValueFactory<TableModel, String>("appName"));
//		
//		build.setCellValueFactory(new PropertyValueFactory<TableModel, String>("build"));
//		
//		packageing.setCellValueFactory(new PropertyValueFactory<TableModel, String>("packageing"));
//
//		install.setCellValueFactory(new PropertyValueFactory<TableModel, String>("install"));
//
//		launch.setCellValueFactory(new PropertyValueFactory<TableModel, String>("launch"));
//
//		exploratory.setCellValueFactory(new PropertyValueFactory<TableModel, String>("exploratory"));
//
//		close.setCellValueFactory(new PropertyValueFactory<TableModel, String>("close"));
//
//		uninstall.setCellValueFactory(new PropertyValueFactory<TableModel, String>("uninstall"));
//
//		crash.setCellValueFactory(new PropertyValueFactory<TableModel, String>("crash"));
//
//		checkBox.setCellValueFactory(new PropertyValueFactory<TableModel, Boolean>("checkBox"));
//
//		checkBox.setCellFactory(new Callback<TableColumn<TableModel, Boolean>, TableCell<TableModel, Boolean>>() {
//
//			public TableCell<TableModel, Boolean> call(TableColumn<TableModel, Boolean> p) {
//				CheckBoxTableCell<TableModel, Boolean> cell = new CheckBoxTableCell<TableModel, Boolean>();
//				cell.addEventFilter(MouseEvent.MOUSE_CLICKED, new EventHandler<MouseEvent>() {
//
//					@Override
//					public void handle(MouseEvent event) {
//						TableModel app = (TableModel)cell.getTableRow().getItem();
//
//						if(!app.getCheckBox()) {
//							selectAllCheck.setSelected(false);
//							runBtnCheck();
//						} else {
//							evaluateSelectAllCheckValue();
//							runBtnCheck();
//						}
//					}
//
//				});
//				return cell;
//			}
//		});
//		//		
//		//		runBtn.setDisable(true);
//		//		rerunBtn.setDisable(true);
//		//		refreshBtn.setDisable(true);
//		//		settingsBtn.setDisable(false);		
//		//		runSuspendBtn.setDisable(true);
//		//		exportReportBtn.setDisable(true);
//		//		exploratoryCodeBtn.setDisable(true);
	}

	
	public void loadBtnClicked() throws FileNotFoundException {
		FileChooser fc = new FileChooser();
		fc.setTitle("Browse sapp file.");
		FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter("SAPP file (*.csv)", "*.csv");
		fc.getExtensionFilters().add(extFilter);
		File selectedFile = fc.showOpenDialog(null);

		if (selectedFile != null) {
			ArrayList<CSVRow> csvRowList = new ArrayList<CSVRow>();
			Scanner sc = new Scanner(selectedFile);
			if(sc.hasNextLine()) {
				sc.nextLine();
			}

			while(sc.hasNextLine()) {
				String line = sc.nextLine();
				String [] parts = line.split(",");
				if(parts.length < 6) {
					System.out.println("Wrong formatted .CSV file!");
				}
				String tcmID = parts[0];
				String tcID = parts[1];
				String module = parts[2];
				String suite = parts[3];
				String platform = parts[4];
				String profile = parts[5];
				
				CSVRow csvRow = new CSVRow();
				csvRow.setTcmID(tcmID);
				csvRow.setTcID(tcID);
				csvRow.setModule(module);
				csvRow.setSuite(suite);
				csvRow.setPlatform(platform);
				csvRow.setProfile(profile);
				
				csvRowList.add(csvRow);
			}
			ArrayList<TableModel> tableModleList = new ArrayList<TableModel>();
			if(!bvtCheck.isSelected()) {
				for (CSVRow csvRow : csvRowList) {
					TableModel model = new TableModel();
					model.name.setValue(csvRow.getModule());
					if(tableModleList.contains(model)) {
						TableModel target = (tableModleList.get(tableModleList.indexOf(model)));
						int count = Integer.valueOf(target.count.getValue())+1;
						target.count.setValue(""+count);
						target.getCsvRowList().add(csvRow);
					} else {
						model.count.setValue(""+1);
						model.getCsvRowList().add(csvRow);
						tableModleList.add(model);
					}
				}
			} else {
				for (CSVRow csvRow : csvRowList) {
					TableModel model = new TableModel();
					model.name.setValue(csvRow.getPlatform());
					if(tableModleList.contains(model)) {
						TableModel target = (tableModleList.get(tableModleList.indexOf(model)));
						int count = Integer.valueOf(target.count.getValue())+1;
						target.count.setValue(""+count);
						target.getCsvRowList().add(csvRow);
					} else {
						model.count.setValue(""+1);
						model.getCsvRowList().add(csvRow);
						tableModleList.add(model);
					}
				}
			}
			sc.close();
			addAllToTcTable(tableModleList);
			
		}
	}

	public void exploratoryCodeBtnClicked() {
		/*SampleAppInfo selected = tcTable.getSelectionModel().getSelectedItem();
		if(selected != null) {
			try {
				showExploratoryCodeWindow(selected);			
			} catch (FileNotFoundException e) {			
				e.printStackTrace();
			}		
		}else {
			System.out.println("[MESSAGE] To write exploratory code please select any application from table");
		}*/
	}

	public void runBtnClicked() {
//		Alert alert = new Alert(AlertType.CONFIRMATION, "", ButtonType.YES, ButtonType.NO);
//		alert.setHeaderText("This plan saved successfully.\nPlan can also execute with commandline \"java -jar cli-uiautomator.jar storeapp\" \nDo you want to run now?");
//		alert.showAndWait();
//
//		if (alert.getResult() == ButtonType.YES) {
//			runBtn.setDisable(true);
//			rerunBtn.setDisable(true);
//			browseBtn.setDisable(true);
//			refreshBtn.setDisable(true);
//			settingsBtn.setDisable(true);
//			runSuspendBtn.setDisable(false);
//			exportReportBtn.setDisable(true);
//			exploratoryCodeBtn.setDisable(true);
//
//			checkBox.setEditable(false);
//			selectAllCheck.setDisable(true);
//
//			refreshTcTable();
//			performCompileRun("run");
//			writeSuspendFile("0");
//		}
	}

	public void rerunBtnClicked() {
		/*clearConsole();
		if(selectFailedRows() > 0) {
			JsoupXMLParser.writeXml(this, "rerun");

			runBtn.setDisable(true);
			rerunBtn.setDisable(true);
			browseBtn.setDisable(true);
			refreshBtn.setDisable(true);
			settingsBtn.setDisable(true);
			runSuspendBtn.setDisable(false);
			exportReportBtn.setDisable(true);
			exploratoryCodeBtn.setDisable(true);

			checkBox.setEditable(false);
			selectAllCheck.setDisable(true);

			refreshTcTable();
			performCompileRun("rerun");
			writeSuspendFile("0");
		}else {
			runBtnCheck();
			System.out.println("[MESSAGE] No failed TCs found to execute rerun.");
		}	*/
	}

	public void exportReportBtnClicked() {
		/*FileChooser fileChooser = new FileChooser();
		fileChooser.setTitle("Browse applications");
		FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter("Binary files (*.xls)", "*.xls");
		fileChooser.getExtensionFilters().add(extFilter);
		File reportDirectory = new File("./reports");

		if (! reportDirectory.exists())
			reportDirectory.mkdir();

		fileChooser.setInitialFileName("report.xls");
		fileChooser.setInitialDirectory(reportDirectory);
		File selectedFile = fileChooser.showSaveDialog(null);

		if (selectedFile != null){
			String reportFilePath=selectedFile.getAbsolutePath();
			if(!reportFilePath.contains(".xls"))
				reportFilePath += ".xls";
			ReportUtils.exportReport(reportFilePath,getTableRows());
		}*/
	}

	public void refreshBtnClicked() {

		/*Alert alert = new Alert(AlertType.CONFIRMATION, "", ButtonType.YES, ButtonType.NO);
		alert.setHeaderText("All application will be removed from table. Do you want to refresh ?");
		alert.showAndWait();

		if (alert.getResult() == ButtonType.YES) {
			clearConsole();
			removeAllFromTcTable();

			runBtn.setDisable(true);
			rerunBtn.setDisable(true);
			exportReportBtn.setDisable(true);
			exploratoryCodeBtn.setDisable(true);
			refreshBtn.setDisable(true);

			selectAllCheck.setSelected(false);
		}*/
	}

	public void runSuspendBtnClicked() {
		/*writeSuspendFile("1");
		runSuspendBtn.setDisable(true);*/
	}

	public void settingsBtnClicked() {
//		try {
//			Stage settingsStage = new Stage();
//			Scene scene = new Scene(FXMLLoader.load(getClass().getResource("SampleAppSettingsScene.fxml")));
//			settingsStage.setScene(scene);
//			settingsStage.setTitle("StoreApp Setting Window");
//			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
//
//			settingsStage.initModality(Modality.APPLICATION_MODAL);
//			settingsStage.show();
//
//		} catch (IOException e) {
//			e.printStackTrace();
//		}	
	}

//	public boolean isBuild() {
//		return buildCheck.selectedProperty().getValue();
//	}
//
//	public boolean isPackageing() {
//		return packageCheck.selectedProperty().getValue();
//	}
//
//	public boolean isInstall() {
//		return installCheck.selectedProperty().getValue();
//	}
//
//	public boolean isLaunch() {
//		return launchCheck.selectedProperty().getValue();
//	}
//
//	public boolean isExploratory() {
//		return exploratoryCheck.selectedProperty().getValue();
//	}
//
//	public boolean isCloseCheck() {
//		return closeCheck.selectedProperty().getValue();
//	}
//
//	public boolean isUninstallCheck() {
//		return uninstallCheck.selectedProperty().getValue();
//	}
//
//	public boolean isCrash() {
//		return crashCheck.selectedProperty().getValue();
//	}
//
//	public TextArea getConsole() {
//		return console;
//	}
//
//	public void clearConsole() {
//		Platform.runLater(() -> console.clear());
//	}	
//	//
	public List<TableModel> getTableRows() {
		return tcTable.getItems();
	}
//
//	private int selectFailedRows() {
//		int count = 0;
//		List<TableModel> rows = getTableRows();
//		for (TableModel appInfo : rows) {
//			if(appInfo.getResult().equals(TCResult.Fail)) {
//				count++;
//				appInfo.setCheckBox(true);
//			} else {
//				appInfo.setCheckBox(false);
//			}
//		}	
//
//		if(rows.size() == count) {
//			selectAllCheck.setSelected(true);
//		} else {
//			selectAllCheck.setSelected(false);
//		}		
//
//		return count;
//	}
//
//	private void refreshTcTable() {
//		List<TableModel> apps = getTableRows();
//		for (TableModel appInfo : apps) {
//			if(!appInfo.getCheckBox()) {
//				continue;
//			}
//			appInfo.buildProperty().setValue("NT");
//			appInfo.packageingProperty().setValue("NT");
//			appInfo.installProperty().setValue("NT");
//			appInfo.uninstallProperty().setValue("NT");
//			appInfo.exploratoryProperty().setValue("NT");
//			appInfo.closeProperty().setValue("NT");
//			appInfo.uninstallProperty().setValue("NT");
//			appInfo.crashProperty().setValue("NT");
//		}		
//	}
//
	public void addToTcTable(TableModel tc) {
		Platform.runLater(new Runnable() {

			@Override
			public void run() {
				tcTable.getItems().add(tc);
			}
		});
	}

	public void addAllToTcTable(List<TableModel> appList) {
		Platform.runLater(new Runnable() {

			@Override
			public void run() {
				for (TableModel app : appList) {
					if(!getTableRows().contains(app)) {
						addToTcTable(app);
					}
				}
			}
		});
	}
//
//	public void removeAllFromTcTable() {
//		Platform.runLater(new Runnable() {
//
//			@Override
//			public void run() {
//				ObservableList<TableModel> data = tcTable.getItems();				
//				data.remove(0, data.size());
//
//			}
//		});
//	} 
//
//	public void resetTctable(List<TableModel> newList) {
//
//		removeAllFromTcTable();
//		addAllToTcTable(newList);
//	}
//
//	private void checkAllTableRow(Boolean value) {
//		List<TableModel> rows = getTableRows();
//		for (TableModel appInfo : rows) {
//			appInfo.setCheckBox(value);
//		}		
//	}
//
//	private void evaluateSelectAllCheckValue() {
//		List<TableModel> rows = getTableRows();
//		boolean isChecked = true;
//		for (TableModel appInfo : rows) {
//			if(!appInfo.getCheckBox()){
//				isChecked = false;
//				break;
//			}
//		}
//
//		selectAllCheck.setSelected(isChecked);
//	}
//
//	private boolean isAllRowUnchecked() {
//		List<TableModel> rows = getTableRows();
//		boolean unchecked = true;
//		for (TableModel appInfo : rows) {
//			if(appInfo.getCheckBox()){
//				unchecked = false;
//				break;
//			}
//		}
//		return unchecked;
//	}
//
//	public void runBtnCheck() {
//		if(!isAllRowUnchecked() && 
//				!exploratoryCodeBtn.isDisable()) {
//			if(!isAllScenarioUnchecked()) {				
//				//runBtn.setDisable(false);
//				//rerunBtn.setDisable(false);
//			} else {
//				//runBtn.setDisable(true);
//				//rerunBtn.setDisable(true);
//			}
//		} else {
//			//runBtn.setDisable(true);
//			//rerunBtn.setDisable(true);
//		}
//	}
//
//	private boolean isAllScenarioUnchecked() {
//		boolean checked = (installCheck.selectedProperty().getValue() ||
//				uninstallCheck.selectedProperty().getValue() || 
//				exploratoryCheck.selectedProperty().getValue() || 
//				crashCheck.selectedProperty().getValue() ||
//				closeCheck.selectedProperty().getValue() || 
//				launchCheck.selectedProperty().getValue());		
//
//		return !checked;
//	}
//
//	private void writeSuspendFile(String line) {
//		try {
//			BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter("./temp/suspend"));
//			bufferedWriter.write(line);
//			bufferedWriter.close();
//		} catch (IOException e) {
//			e.printStackTrace();
//		}
//	}
//
//	public void showExploratoryCodeWindow(TableModel selected) throws FileNotFoundException {
//		String [] parts = readExploratoryCode(selected);
//		JDialog frame = new JDialog();
//		frame.setModalityType(ModalityType.APPLICATION_MODAL);
//		frame.setModal(true);
//		frame.setTitle("Exploratory Code: "+selected.appNameProperty().getValue());
//		frame.setLayout(new BorderLayout());
//
//		JPanel contentPane = new JPanel(new GridBagLayout());
//		contentPane.setBorder(BorderFactory.createLineBorder(java.awt.Color.DARK_GRAY));
//
//		GridBagConstraints codeContentConst = new GridBagConstraints();
//		codeContentConst.fill = GridBagConstraints.BOTH; 
//		codeContentConst.weightx = 0.0;
//		codeContentConst.weighty = 0.1;
//		codeContentConst.gridwidth = 3;
//		codeContentConst.gridx = 0;
//		codeContentConst.gridy = 0;
//
//		JPanel codeContent = new JPanel();
//
//		codeContent.setLayout(new BoxLayout(codeContent, BoxLayout.X_AXIS));    
//		RTextScrollPane scrollPanel ; 
//
//		RSyntaxTextArea textArea = new RSyntaxTextArea();
//		textArea.setFont(textArea.getFont().deriveFont(14.0f));
//		textArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVA);
//		textArea.setCodeFoldingEnabled(true);
//		textArea.setText(parts[1].trim().replace("null", "")+"\n");
//		scrollPanel = new RTextScrollPane(textArea);
//
//		codeContent.add(scrollPanel);
//		contentPane.add(codeContent, codeContentConst);
//
//		JPanel buttonPane = new JPanel(new GridBagLayout());
//		buttonPane.setMaximumSize(new Dimension(Integer.MAX_VALUE, 100));
//
//		GridBagConstraints buttonPaneConst = new GridBagConstraints();
//		buttonPaneConst.fill = GridBagConstraints.HORIZONTAL;
//		buttonPaneConst.weightx = 1;
//		buttonPaneConst.weightx = 0.9;
//		buttonPaneConst.anchor = GridBagConstraints.PAGE_END;
//		buttonPaneConst.gridx = 0;
//		buttonPaneConst.gridy = 3;
//		buttonPaneConst.gridwidth = 3;
//
//		JButton saveBtn = new JButton("Save");
//		saveBtn.addActionListener(new ActionListener() {
//
//			@Override
//			public void actionPerformed(java.awt.event.ActionEvent e) {
//				try {
//					PrintWriter pw = new PrintWriter(new File("./src/storeapp/"+selected.getJavaFileName()+".java"));
//					pw.write( parts[0].trim().replace("null", "")+"\n\t\t"+textArea.getText().replace("\n", "\n\t\t")+"\n\t}\n\n"+parts[2].trim().replace("null", ""));
//					pw.flush();
//					pw.close();
//				} catch (Exception ex) {
//					System.out.println("[ERROR] " + ex.getMessage());
//				}
//
//				JOptionPane.showMessageDialog(frame, "Exploratory Code: " + selected.appNameProperty().getValue() + " saved successfully.");
//			}
//		});
//
//		GridBagConstraints saveBtnConst = new GridBagConstraints();
//		saveBtnConst.fill = GridBagConstraints.HORIZONTAL;
//		saveBtnConst.insets = new Insets(10, 0, 10, 5);
//		saveBtnConst.gridx = 2;
//		saveBtnConst.gridy = 0;
//		saveBtnConst.gridwidth = 1;
//
//		GridBagConstraints closeBtnConst = new GridBagConstraints();
//		closeBtnConst.fill = GridBagConstraints.HORIZONTAL;
//		closeBtnConst.insets = new Insets(10, 5, 10, 0);
//		closeBtnConst.gridx = 3;
//		closeBtnConst.gridy = 0;
//		closeBtnConst.gridwidth = 1;
//		JButton closeBtn = new JButton("Close");
//		closeBtn.addActionListener(new ActionListener() {
//
//			@Override
//			public void actionPerformed(java.awt.event.ActionEvent e) {
//				frame.dispose();
//
//			}
//		});
//		buttonPane.add(saveBtn, saveBtnConst);
//		buttonPane.add(closeBtn, closeBtnConst);
//
//		contentPane.add(buttonPane, buttonPaneConst);
//		frame.add(contentPane);
//
//
//		frame.pack();
//		frame.setSize(680, 600);
//		frame.setPreferredSize(new Dimension(680, 600));
//		frame.setResizable(true);
//		frame.setVisible(true);
//	}
//
//	
//
//	private String[] readExploratoryCode(TableModel selected) throws FileNotFoundException {
//
//		Scanner sc = new Scanner(new File("./src/storeapp/"+selected.getJavaFileName()+".java"));
//		String expLine = "\tpublic void exploratory() {";
//		String endLine = "\tpublic void close() {";
//		String [] parts = new String[3];
//		int currentIndex = 0;
//
//		while(sc.hasNextLine()) {
//			String line = sc.nextLine();
//			if(line.equals(expLine)) {
//				parts[currentIndex] += line + "\n";
//				currentIndex++;
//			} else if(line.equals(endLine)) {
//				currentIndex++;
//				parts[currentIndex] += line+ "\n";
//			} else {
//				parts[currentIndex] += line+ "\n";
//			}
//		}
//
//		sc.close();
//		parts[1] = parts[1].trim().substring(0, parts[1].trim().length()-1);
//		parts[1] = parts[1].replaceAll("\t", "");
//
//		return parts;
//	}
//
//
//	private boolean isWindows() {
//		String osName = System.getProperty("os.name");
//
//		if (osName.toLowerCase().contains("windows")) {
//			return true;
//		}
//		return false;
//	}
//
//	public void imagePopupWindowShow(String imgPath) {
//
//		File imageFile;
//		Image image;
//		ImageView imageView; 
//		BorderPane pane;
//		Scene scene;
//		Stage stage;
//
//		imageFile = new File(imgPath);
//		image = new Image(imageFile.toURI().toString());
//		imageView = new ImageView(image);
//
//		// Image will sit in the middle of our popup.
//		pane = new BorderPane();
//		pane.setCenter(imageView);
//		scene = new Scene(pane);
//
//		// Create the actual window and display it.
//		stage = new Stage();
//		stage.setScene(scene);
//		// Without this, the audio won't stop!
//		stage.setOnCloseRequest(
//				e -> {
//					e.consume();
//					stage.close();
//				}
//				);
//		stage.showAndWait();
//	}
//	
//	private List<String> getRootstraps() {
//		ArrayList <String> rootstrapsList = new ArrayList<String>();
//		ProcessBuilder getRootstraps;
//		Process getRootstrapsProcess;
//		try {
//			if (!isWindows()) {
//				getRootstraps = new ProcessBuilder("/bin/sh", "-c",ConfigUtil.getValue(Constants.SDK_PATH)+"/tools/ide/bin/tizen list rootstrap");
//			} else {
//				getRootstraps = new ProcessBuilder("cmd", "/c", ConfigUtil.getValue(Constants.SDK_PATH)+"/tools/ide/bin/tizen list rootstrap");
//			}
//			getRootstrapsProcess = getRootstraps.start();
//			String line = "";
//			BufferedReader msgReader = new BufferedReader(new InputStreamReader(getRootstrapsProcess.getInputStream()));
//
//
//			while ((line = msgReader.readLine()) != null) {
//				if(line.contains("device.core") || line.contains("emulator.core")) {
//					rootstrapsList.add(new Scanner(line).next());
//				}
//			}
//			getRootstrapsProcess.waitFor();
//			msgReader.close();			
//			getRootstrapsProcess.destroy();
//		} catch (Exception e) {
//			e.printStackTrace();
//		}	
//
//		return rootstrapsList;
//	}
//	
//	private void performCompileRun(String mode) {
//
//		new Thread(new Runnable() {
//
//			@Override
//			public void run() {
//				String currentWorkingDirectory = System.getProperty("user.dir");
//				ProcessBuilder compile, run;
//				Process compileProcess, runProcess;
//
//				try {
//					if (!isWindows()) {
//						compile = new ProcessBuilder("/bin/sh", "-c","javac -d "+
//								currentWorkingDirectory + "/bin -cp "+ currentWorkingDirectory
//								+ "/AFEngine/lib/*" + ":"+currentWorkingDirectory + "/lib/*:" + currentWorkingDirectory + "/src "+
//								currentWorkingDirectory + "/src/apprunner/Main.java "+ currentWorkingDirectory + "/src/sampleapp/*.java");
//					} else {
//						compile = new ProcessBuilder("cmd", "/c", "javac -d "+
//								currentWorkingDirectory + "/bin -cp "+ currentWorkingDirectory
//								+ "/AFEngine/lib/*" + ";"+currentWorkingDirectory + "/lib/*;" + currentWorkingDirectory + "/src "+
//								currentWorkingDirectory + "/src/apprunner/Main.java "+ currentWorkingDirectory + "/src/sampleapp/*.java");
//					}
//
//					compileProcess = compile.start();
//
//					String line = "";
//					BufferedReader msgReader = new BufferedReader(new InputStreamReader(compileProcess.getErrorStream()));
//					BufferedReader errReader = new BufferedReader(new InputStreamReader(compileProcess.getErrorStream()));
//
//					while ((line = msgReader.readLine()) != null) {
//						System.out.println(line);
//					}
//
//					int returnCode = compileProcess.waitFor();
//
//					msgReader.close();
//					errReader.close();					
//					compileProcess.destroy();
//
//					if (returnCode == 0) {
//						if (!isWindows()) {
//							run = new ProcessBuilder("/bin/sh", "-c",
//									"java -cp " + currentWorkingDirectory + "/AFEngine/lib/*:" + currentWorkingDirectory + "/lib/*:"
//											+ currentWorkingDirectory + "/bin apprunner.Main sampleapp "+mode);
//						} else {
//							run = new ProcessBuilder("cmd", "/c",
//									"java -cp " + currentWorkingDirectory + "/AFEngine/lib/*;" + "lib/*;"
//											+ currentWorkingDirectory + "/bin apprunner.Main sampleapp "+mode);
//						}
//
//						runProcess = run.start();
//						msgReader = new BufferedReader(new InputStreamReader(runProcess.getInputStream()));
//						errReader = new BufferedReader(new InputStreamReader(runProcess.getErrorStream()));	
//
//						StringBuffer msgSb = new StringBuffer();
//						StringBuffer errSb = new StringBuffer();
//						String sm,se;
//
//						while(true) {
//							try{
//								runProcess.exitValue();
//								break;
//							}catch(IllegalThreadStateException ex){
//
//							}
//
//							while (msgReader.ready()) {
//								sm = msgReader.readLine();
//								msgSb.append(sm);
//
//								System.out.println(msgSb.toString());
//
//								if(sm.contains("[result]")) {
//									sm = "[result]" + sm.split("\\[result\\]")[1];
//
//									sm = sm.replaceAll("\\]\\[", " ");
//									sm = sm.replaceAll("\\[", "");
//									sm = sm.replaceAll("\\]", "");	
//
//									Scanner sc = new Scanner(sm);
//									sc.next();
//									TableModel app = new TableModel(sc.next());
//
//									String tcName = sc.next();
//									sc.next();
//									String result = sc.next();
//
//									List<TableModel> appList = getTableRows(); 
//
//									for (TableModel appInfo : appList) {
//										if(appInfo.equals(app)) {
//											if(tcName.equals("install")) {
//												appInfo.installProperty().setValue(result);
//											} else if(tcName.equals("launch")) {
//												appInfo.launchProperty().setValue(result);
//											} else if(tcName.equals("exploratory")) {
//												appInfo.exploratoryProperty().setValue(result);
//											} else if(tcName.equals("close")) {
//												appInfo.closeProperty().setValue(result);
//											} else if(tcName.equals("uninstall")) {
//												appInfo.uninstallProperty().setValue(result);
//											} else if(tcName.equals("detectCrash")) {
//												appInfo.crashProperty().setValue(result);
//											}
//										}
//									}
//									sc.close();
//								}
//
//								msgSb = new StringBuffer();
//							}
//
//							while (errReader.ready()) {
//								se = errReader.readLine();
//								errSb.append(se);
//								System.out.println(errSb.toString());
//								errSb = new StringBuffer();
//							}
//
//							Thread.sleep(10);
//						}
//
//						msgReader.close();
//						errReader.close();
//						runProcess.destroy();
//					}
//
//				} catch (Exception e) {
//
//					e.printStackTrace();
//				}	
//
//				runBtn.setDisable(false);
//				rerunBtn.setDisable(false);
//				browseBtn.setDisable(false);
//				refreshBtn.setDisable(false);
//				settingsBtn.setDisable(false);
//				runSuspendBtn.setDisable(true);
//				exportReportBtn.setDisable(false);
//				exploratoryCodeBtn.setDisable(false);
//
//				checkBox.setEditable(true);
//				selectAllCheck.setDisable(false);
//
//			}
//		}).start();
//	}
	@Override
	public void handle(ActionEvent event) {
		if (event.getSource() instanceof CheckBox) {
			CheckBox chk = (CheckBox) event.getSource();

			if ("BVT/NON-BVT".equals(chk.getText())) {
				if(chk.selectedProperty().getValue()) {
					platform30Check.setSelected(false);
					platform24Check.setSelected(false);
					platform232Check.setSelected(false);
					platform231Check.setSelected(false);
					platformCommonCheck.setSelected(false);
					
				}
			} 
//			else if ("Launch".equals(chk.getText())) {
//				if(chk.selectedProperty().getValue()) {
//					installCheck.setSelected(true);
//				} else {
//					exploratoryCheck.setSelected(false);
//					closeCheck.setSelected(false);
//					crashCheck.setSelected(false);
//				}
//			}  
		}
	}
}
