package application;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.concurrent.Task;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Orientation;
import javafx.geometry.Pos;
import javafx.stage.Stage;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.SplitPane;
import javafx.scene.control.TextArea;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.StackPane;
import javafx.scene.text.Text;

public class Main extends Application {

	static final int SCENE_WIDTH = 600;
	static final int SCENE_HEIGHT = 600;
	TextArea console;

	@Override
	public void start(Stage primaryStage) {
		try {
			//			SplitPane root = new SplitPane();
			//			
			//			final StackPane sp1 = new StackPane();
			//			sp1.getChildren().add(new Button("Button One"));
			//			final SplitPane sp2 = new SplitPane();
			//			sp2.setOrientation(Orientation.VERTICAL);
			//			sp2.setDividerPositions(0.3f);
			final MyTask task = new MyTask();
		    console = new TextArea();
		    console.setText("");
		    console.textProperty().bind(task.textoProperty());
			
			
			GridPane btnGrid = new GridPane();
			btnGrid.setAlignment(Pos.CENTER);
			btnGrid.setHgap(10);
			btnGrid.setVgap(10);
			btnGrid.setPadding(new Insets(25, 25, 25, 25));


			Button btnRun = new Button("Run");
			btnGrid.add(btnRun, 1, 1);
			btnRun.setOnAction(new EventHandler<ActionEvent>() {

				@Override
				public void handle(ActionEvent e) {
					System.out.println("Run pressed");
					console.clear();
					//new Thread(task).start();
					new UploadTask( console, "Run");
				}
			});

			Button btnReRun = new Button("Re-Run");
			btnGrid.add(btnReRun, 2, 1);
			btnReRun.setOnAction(new EventHandler<ActionEvent>() {

				@Override
				public void handle(ActionEvent e) {
					new UploadTask( console,"Re-Run");
				}
			});

			Button btnOthers = new Button("Others");
			btnGrid.add(btnOthers, 3, 1);
			btnReRun.setOnAction(new EventHandler<ActionEvent>() {

				@Override
				public void handle(ActionEvent e) {
					new UploadTask( console,"Others");
				}
			});



			//			sp2.getItems().addAll(btnGrid, console);
			//			
			//			root.getItems().addAll(sp1, sp2);
			//			root.setDividerPositions(0.3f);

			GridPane root = new GridPane();

			Pane modules = new BorderedTitledPane("Modules", new StackPane());
			Pane buttons = new BorderedTitledPane("Operations", btnGrid);
			Pane consoleContainer = new BorderedTitledPane("Console", console);

			//root.add(modules, 0, 0, 1, 5);
			root.add(buttons, 0, 0, 3, 1);
			root.add(consoleContainer, 1, 1, 2, 4);

			Scene scene = new Scene(root , SCENE_WIDTH, SCENE_HEIGHT);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void runAnUpdateConsole( String arg, MyTask task) {
		ProcessBuilder run;
		Process runProcess;
		System.out.println("Inside run and update....");
		try {
			if (!isWindows()) {
				System.out.println("Starting exe....");
				run = new ProcessBuilder("java", "-jar",
						"test-jar.jar", arg);
			} else {
				System.out.println("Starting exe....");
				run = new ProcessBuilder("cmd", "/c", "java", "-jar",
						"test-jar.jar", arg);
			}
			
			runProcess = run.start();
			System.out.println("Started exe....");
			BufferedReader msgReader = new BufferedReader(new InputStreamReader(runProcess.getInputStream()));
			BufferedReader errReader = new BufferedReader(new InputStreamReader(runProcess.getErrorStream()));	

			StringBuffer msgSb = new StringBuffer();
			StringBuffer errSb = new StringBuffer();
			char m = 0 ;	
			char e = 0 ;
			while(true) {
				try{
					runProcess.exitValue();
					break;
				}catch(IllegalThreadStateException ex){

				}

				while (msgReader.ready()) {
					System.out.println("reading msg....");
					m = (char)msgReader.read();
					
					msgSb.append(m);
					
					if(m == 10) {
						console.setText(console.getText()+msgSb.toString()+"");
						task.setText(console.getText()+msgSb.toString());
						new Thread(task).start();
						System.out.println("#"+msgSb.toString());
						msgSb = new StringBuffer();
					}

				}

//				while (errReader.ready()) {
//					e = (char)errReader.read();
//					errSb.append(e);
//					if(e == 10) {
//						console.setText(console.getText()+errSb.toString()+"");
//						errSb = new StringBuffer();
//					}
//				}
				Thread.sleep(10);
			}

			msgReader.close();
			errReader.close();
			runProcess.destroy();

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private boolean isWindows() {
		String osName = System.getProperty("os.name");

		if (osName.toLowerCase().contains("windows")) {
			return true;
		}
		return false;
	}

	public static void main(String[] args) {
		launch(args);
	}
	
	public class MyTask extends Task {
        private StringProperty texto = new SimpleStringProperty();
        private String text = "";
        public final StringProperty textoProperty() {
            return texto;
        }
        
        public void setText(String s) {
        	text  = s;
        }
        
        @Override
        protected Void call() throws Exception {

            for (int i = 0; i < 2000; i++) {
                Platform.runLater(new Runnable() {
                    @Override public void run() {
                        texto.setValue(texto.getValue() + text);
                    }
                });
            }
            return null;
        }
    }
}
