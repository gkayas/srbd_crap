package manager;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Scanner;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

public class MainRunner {

	public static void main(String[] args) {
		try {
			ArrayList<Vnc> vncList = new ArrayList<Vnc>();
			ArrayList<Device> deviceList = new ArrayList<Device>();
			ArrayList<String> output = UtilsCLI.runCommand("sdb devices", null );
			for (String line : output) {
				if(line.matches(Constant.EXPRESOIN)) {
					Scanner sc = new Scanner(line);
					Device newDevice = new Device(sc.next(), sc.next(), sc.next());
					deviceList.add(newDevice);
					Vnc vnc = new Vnc(newDevice);

					vnc.runServer();
					Thread.sleep(3000);
					writeDeviceInfoXML(newDevice);
					vnc.runClient();
					vnc.install();
					
					Thread.sleep(3000);
					sc.close();
					int []ar = {1,2};
				}
			}	
			
	/*	writeDeviceInfosXML(deviceList);
			for (Device device: deviceList) {
				Vnc vnc = new Vnc(device);
				vnc.install();
				vnc.runServer();
				Thread.sleep(3000);
				vnc.runClient();
				device.closeSocket();
			}*/

			
		} catch (Exception e) {
			System.err.println(e.getMessage());
		}
	}
	
	public static void writeDeviceInfosXML(ArrayList<Device> deviceList) {
		try {
			
			Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
			Element root = doc.createElement("devicelist");
			doc.appendChild(root);
			
			for (Device sdbDevice : deviceList) {
				Element row = doc.createElement("device");
				row.setAttribute("name", sdbDevice.getName());
				row.setAttribute("serial", sdbDevice.getSerial());
				row.setAttribute("screenWidth", ""+sdbDevice.getScreenWidth());
				row.setAttribute("screenHeight", ""+sdbDevice.getScreenHeight());
				row.setAttribute("version", sdbDevice.getVersion());
				row.setAttribute("arm", sdbDevice.isArchArm()+"");
				row.setAttribute("shape", sdbDevice.isShapeCircle()+"");
				row.setAttribute("rmiPort", sdbDevice.getRmiPort()+"");
				row.setAttribute("vncPort", sdbDevice.getVncPort()+"");
				root.appendChild(row);
				
			}
			Transformer transformer = TransformerFactory.newInstance().newTransformer();
		    StringWriter writer = new StringWriter();
		    StreamResult result = new StreamResult(writer);
		    transformer.transform(new DOMSource(doc), result);

		    PrintWriter pw = new PrintWriter(new File("device_config.xml"));
		    pw.write(writer.toString());
		    pw.flush();
		    pw.close();
		    
		} catch (Exception e) {
			e.printStackTrace();
		} 
	}
	
	public static void writeDeviceInfoXML(Device sdbDevice) {
		try {
			
//			Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
			DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
		    DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
			Document doc = null;
			try{
				doc = documentBuilder.parse("device_config.xml");
			} catch (IOException e) {
				doc = documentBuilder.newDocument();
			}
			Element root = doc.getDocumentElement();
			
		    if(root == null) {
		    	 root = doc.createElement("devicelist");
		    	 doc.appendChild(root);
		    }
		    
			
//			for (Device sdbDevice : deviceList) {
				Element row = doc.createElement("device");
				row.setAttribute("name", sdbDevice.getName());
				row.setAttribute("serial", sdbDevice.getSerial());
				row.setAttribute("screenWidth", ""+sdbDevice.getScreenWidth());
				row.setAttribute("screenHeight", ""+sdbDevice.getScreenHeight());
				row.setAttribute("version", sdbDevice.getVersion());
				row.setAttribute("arm", sdbDevice.isArchArm()+"");
				row.setAttribute("shape", sdbDevice.isShapeCircle()+"");
				row.setAttribute("rmiPort", sdbDevice.getRmiPort()+"");
				row.setAttribute("vncPort", sdbDevice.getVncPort()+"");
				root.appendChild(row);
				
//			}
			Transformer transformer = TransformerFactory.newInstance().newTransformer();
		    StringWriter writer = new StringWriter();
		    StreamResult result = new StreamResult(writer);
		    transformer.transform(new DOMSource(doc), result);

		    PrintWriter pw = new PrintWriter(new File("device_config.xml"));
		    pw.write(writer.toString());
		    pw.flush();
		    pw.close();
		    
		} catch (Exception e) {
			e.printStackTrace();
		} 
	}
	
}
