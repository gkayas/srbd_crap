package fxviewer;

import java.io.File;
import java.net.URL;
import java.util.ResourceBundle;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.TextField;
import javafx.stage.DirectoryChooser;
import javafx.stage.FileChooser;
import javafx.stage.Stage;

public class SampleAppSettingsController implements Initializable{

	@FXML
	private Button saveBtn;

	@FXML
	private Button closeBtn;
	
	@FXML
	private Button browseSDKPathBtn;

	@FXML
	private Button browseReprotPathBtn;
	
	@FXML
	private Button browseKeyPathBtn;

	@FXML
	private TextField sdkPathTxt;

	@FXML
	private TextField reportPathTxt;
	
	@FXML
	private TextField nativeUrlTxt;
	
	@FXML
	private TextField webUrlTxt;
	
	@FXML
	private TextField userNameTxt;
	
	@FXML
	private TextField userPassTxt;
	
	@FXML
	private TextField keyPathTxt;
	
	@FXML
	private TextField keyNameTxt;
	
	@FXML
	private TextField keyPassTxt;
	
	@FXML
	private ComboBox<String> archCombo;
	
	@FXML
	private ComboBox<String> compilerCombo;
	
	@FXML
	private ComboBox<String> buildConfigCombo;
	
	@Override
	public void initialize(URL location, ResourceBundle resources) {
		ConfigUtil.readDeviceConfig();
		ConfigUtil.readUIAToolConfig();
		
		sdkPathTxt.setText(ConfigUtil.getValue(Constants.SDK_PATH));
		reportPathTxt.setText(ConfigUtil.getValue(Constants.REPORT_PATH));	
		
		ObservableList<String> optionsArch = 
			    FXCollections.observableArrayList(
			        "x86",
			        "armv7l"
		);
		
		ObservableList<String> optionsCompiler = 
			    FXCollections.observableArrayList(
			        "gcc",
			        "llvm"
		);
		
		ObservableList<String> optionsBuildConfig = 
			    FXCollections.observableArrayList(
			        "debug",
			        "release"
		);
		
		archCombo.setItems(optionsArch);
		archCombo.getSelectionModel().select("armv7l");
		compilerCombo.setItems(optionsCompiler);
		compilerCombo.getSelectionModel().select("gcc");
		buildConfigCombo.setItems(optionsBuildConfig);
		buildConfigCombo.getSelectionModel().select("debug");
	}

	
	public void browseBtnClicked(ActionEvent event) {
		
		if(event.getSource().equals(browseReprotPathBtn)) {
			FileChooser fileChooser = new FileChooser();
			fileChooser.setTitle("Select Report File");
			FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter("report files (*.xls)", "*.xls");
			fileChooser.getExtensionFilters().add(extFilter);
			File reportDirectory = new File("./reports");

			if (!reportDirectory.exists()) 
				reportDirectory.mkdir();

			fileChooser.setInitialFileName("report.xls");
			fileChooser.setInitialDirectory(reportDirectory);
			File selectedFile = fileChooser.showSaveDialog(null);

			if (selectedFile != null){
				String reportFilePath = selectedFile.getAbsolutePath();
				if(!reportFilePath.contains(".xls")) {
					reportFilePath += ".xls";
				}

				reportPathTxt.setText(reportFilePath);
			}
		} else if(event.getSource().equals(browseSDKPathBtn)) {
			DirectoryChooser chooser = new DirectoryChooser();
			chooser.setTitle("Select Tizen SDK/Studio Path");
			File defaultDirectory = new File(System.getProperty("user.home"));
			chooser.setInitialDirectory(defaultDirectory);
			File selectedDirectory = chooser.showDialog(null);

			if (selectedDirectory != null){
				sdkPathTxt.setText(selectedDirectory.getAbsolutePath());
			}
		} else if(event.getSource().equals(browseKeyPathBtn)) {
			DirectoryChooser chooser = new DirectoryChooser();
			chooser.setTitle("Select Tizen SDK/Studio Path");
			File defaultDirectory = new File(System.getProperty("user.home"));
			chooser.setInitialDirectory(defaultDirectory);
			File selectedDirectory = chooser.showDialog(null);

			if (selectedDirectory != null){
				keyPathTxt.setText(selectedDirectory.getAbsolutePath());
			}
		}		
	}
		
	public void closeBtnClicked(ActionEvent event) {
	    Stage stage = (Stage) closeBtn.getScene().getWindow();
	    stage.close();
	}
	
	public void saveBtnClicked(ActionEvent event) {
		ConfigUtil.setValue(Constants.SDK_PATH, sdkPathTxt.getText());
		ConfigUtil.setValue(Constants.REPORT_PATH, reportPathTxt.getText());
		ConfigUtil.setValue(Constants.KEY_PATH, keyPathTxt.getText());
			
		ConfigUtil.writeIntoDeviceConfig();
		ConfigUtil.writeIntoUIAToolConfig();
		
		Alert alert = new Alert(AlertType.INFORMATION);
		alert.setTitle("Message");
		alert.setHeaderText(null);
		alert.setContentText("UIAutomator configuration saved successfully");
		alert.showAndWait();
	}
	
}
