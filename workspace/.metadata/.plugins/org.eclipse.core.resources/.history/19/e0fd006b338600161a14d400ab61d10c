package apprunner;

import java.awt.List;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.MissingFormatArgumentException;

import javax.lang.model.element.Element;
import javax.swing.text.Document;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.jsoup.Jsoup;
import org.jsoup.nodes.*;
import org.jsoup.select.Elements;

import fxviewer.MainController;

public class JsoupXMLParser {

	// public static ArrayList<AppInfo> parseXML(String filePath) {
	// ArrayList<AppInfo> appInfoList = new ArrayList<AppInfo>();
	// try {
	// Document doc = Jsoup.parse(new File(filePath), "UTF-8");
	// Elements apps = doc.select("app");
	//
	// for (Element app : apps) {
	// String name = app.attr("name");
	// String binary = app.attr("binary");
	//
	// ArrayList<TestInfo> testcases = new ArrayList<TestInfo>();
	// Elements childern = app.children().select("TC");
	//
	// for (Element child : childern) {
	// String tcName = child.attr("name");
	// TestInfo testcase = new TestInfo(tcName, TCResult.NT);
	// testcase.setLevel(Integer.parseInt(child.attr("level")));
	// testcase.setPreCondition(child.attr("precondition"));
	// testcases.add(testcase);
	// }
	//
	// appInfoList.add(new AppInfo(testcases, name, binary));
	// }
	//
	//
	// } catch (IOException e) {
	// e.printStackTrace();
	// }
	//
	// return appInfoList;
	// }

	public static void writeXml( MainController controller) {
		try {
			
			java.util.List<AppInfo> appList = controller.getTableRows();
			org.w3c.dom.Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();

			org.w3c.dom.Element root = doc.createElement("meunutree");
			doc.appendChild(root);

			for (AppInfo appInfo : appList) {
				if(!appInfo.getCheckBox()) {
					continue;
				}
				org.w3c.dom.Element row = doc.createElement("app");
				String javaFileName = appInfo.getJavaFileName();
				row.setAttribute("name", javaFileName);
				row.setAttribute("path", appInfo.getFullPath());
				root.appendChild(row);

				if(controller.isInstall()) {
					org.w3c.dom.Element install = doc.createElement("TC");
					install.setAttribute("level", "1");
					install.setAttribute("name", "install");
					install.setAttribute("precondition", "");
					row.appendChild(install);
				} 
				if(controller.isLaunch()) {
					org.w3c.dom.Element launch = doc.createElement("TC");
					launch.setAttribute("level", "2");
					launch.setAttribute("name", "launch");
					launch.setAttribute("precondition", "install");
					row.appendChild(launch);
				} 
				if(controller.isExploratory()) {
					org.w3c.dom.Element launch = doc.createElement("TC");
					launch.setAttribute("level", "3");
					launch.setAttribute("name", "exploratory");
					launch.setAttribute("precondition", "launch");
					row.appendChild(launch);
				} 
				if(controller.isCloseCheck()) {
					org.w3c.dom.Element launch = doc.createElement("TC");
					launch.setAttribute("level", "3");
					launch.setAttribute("name", "close");
					launch.setAttribute("precondition", "launch");
					row.appendChild(launch);
				} 
				if(controller.isUninstallCheck()) {
					org.w3c.dom.Element launch = doc.createElement("TC");
					launch.setAttribute("level", "2");
					launch.setAttribute("name", "uninstall");
					launch.setAttribute("precondition", "install");
					row.appendChild(launch);
				} 
				if(controller.isCrash()) {
					org.w3c.dom.Element launch = doc.createElement("TC");
					launch.setAttribute("level", "1");
					launch.setAttribute("name", "detectCrash");
					launch.setAttribute("precondition", "launch");
					row.appendChild(launch);

				}

			}
			 // create Transformer object
		    Transformer transformer = TransformerFactory.newInstance().newTransformer();
		    StringWriter writer = new StringWriter();
		    StreamResult result = new StreamResult(writer);
		    transformer.transform(new DOMSource(doc), result);
		    
		    PrintWriter pw = new PrintWriter("./res/xml/storeapp.xml");
		    pw.write(writer.toString());
		    pw.flush();
		    pw.close();
		    

		} catch (Exception e) {

			e.printStackTrace();

		}

	}

}
