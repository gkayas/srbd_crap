
public class Grid {
	private Node [][] nodes ;
	private int height,width;
	private int startX,startY;
	private Node current;
	
	public Node getCurrent() {
		return current;
	}
	
	public void setCurrent(Node current) {
		this.current = current;
	}
	
	public Grid(Node [][] nodes, int width, int height, int startX, int startY) {
		this.nodes = nodes;
		this.height = height;
		this.width = width;
		current = nodes[startX][startY];
		current.setPositionX(startX);
		current.setPositionY(startY);
	}
	
	public Node moveRight() {
		int currentX = current.getPositionX();
		
		if(currentX == width-1) {
			return null;
		}
		int currentY = current.getPositionY();
		Node next = nodes[currentX + 1][currentY];
		next.incoming(current);
		current = next;
		return current;
	}
	
	public Node moveLeft() {
		int currentX = current.getPositionX();
		
		if(currentX == 0) {
			return null;
		}
		int currentY = current.getPositionY();
		Node next = nodes[currentX - 1][currentY];
		next.incoming(current);
		next.setPositionX(currentX - 1);
		next.setPositionY(currentY);
		current = next;
		return current;
	}
	
	public Node moveUp() {
		
		int currentY = current.getPositionY();
		if(currentY == 0) {
			return null;
		}
		int currentX = current.getPositionX();
		Node next = nodes[currentX][currentY - 1];
		next.incoming(current);
		next.setPositionX(currentX);
		next.setPositionY(currentY - 1);
		current = next;
		return current;
	}
	
	public Node moveDown() {
		int currentY = current.getPositionY();
		if(currentY == height-1) {
			return null;
		}
		int currentX = current.getPositionX();
		Node next = nodes[currentX][currentY + 1];
		next.incoming(current);
		current = next;
		return current;
	}
}
