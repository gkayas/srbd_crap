package fxviewer;


import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.ResourceBundle;
import java.util.Scanner;

import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.filechooser.FileNameExtensionFilter;

import apprunner.AppInfo;
import apprunner.JsoupXMLParser;
import javafx.application.Platform;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.geometry.Pos;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.Menu;
import javafx.scene.control.MenuBar;
import javafx.scene.control.MenuItem;
import javafx.scene.control.SeparatorMenuItem;
import javafx.scene.control.Tab;
import javafx.scene.control.TabPane;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextInputDialog;
import javafx.scene.control.TreeItem;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.layout.VBoxBuilder;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import javafx.stage.StageStyle;


public class MainController implements Initializable, EventHandler<ActionEvent>  /*,ChangeListener*/{

//	public static final String SUITE_FILES_FOLDER = ResourceUtils.getXmlPath();

	static LaunchInterfaceTask interfaceTask;
	static RunServerTask runServerTask;

	@FXML
	private TableView<AppInfo> tcTable;

	@FXML
	private TableColumn<AppInfo, String> appName;
	
	@FXML
	private TableColumn<AppInfo, String> install;
	
	@FXML
	private TableColumn<AppInfo, String> launch;
	
	@FXML
	private TableColumn<AppInfo, String> exploratory;
	
	@FXML
	private TableColumn<AppInfo, String> close;
	
	@FXML
	private TableColumn<AppInfo, String> uninstall;
	
	@FXML
	private TableColumn<AppInfo, String> crash;
	
	@FXML
	private CheckBox installCheck;
	
	@FXML
	private CheckBox launchCheck;
	
	@FXML
	private CheckBox exploratoryCheck;
	
	@FXML
	private CheckBox closeCheck;
	
	@FXML
	private CheckBox uninstallCheck;
	
	@FXML
	private CheckBox crashCheck;
	
	@FXML
	private Button browseBtn;

	@FXML
	private Button exploratoryCodeBtn;
	
	@FXML
	private Button runBtn;

	@FXML
	private Button rerunBtn;

	@FXML
	private Button runSingleBtn;
	
	@FXML
	private Button runSuspendBtn;
	
	@FXML
	private Button refreshBtn;
	
	@FXML
	private TextArea console;
	
	
	
	private void generateJavaFile() {
		
		try {
			Scanner sc = new Scanner(new File("./template"));
			StringBuffer sb = new StringBuffer();
			while(sc.hasNextLine()) {
				sb.append(sc.nextLine()+"\n");
			}
			sc.close();
			
			
			List<AppInfo> apps = getTableRows();
			
			for (AppInfo appInfo : apps) {
				String appName = appInfo.getName().getValue();
				File file = new File("./src/storeapp/StoreApp_"+appName+".java");
				
				if(!file.exists()) {				
					PrintWriter pw = new PrintWriter(file);
					String temp = sb.toString();
					temp = temp.replaceAll("ClassName","StoreApp_"+appName);
					pw.write(temp);
					pw.flush();
					pw.close();
				}
			}
			
	
		} catch (FileNotFoundException e) {
			
			e.printStackTrace();
		}
		
	}
	
	public void generateJavaFileFromAppInfo(AppInfo appInfo) {
		try {
			Scanner sc = new Scanner(new File("./res/template/template.java"));
			StringBuffer sb = new StringBuffer();
			while(sc.hasNextLine()) {
				sb.append(sc.nextLine()+"\n");
			}
			sc.close();

			String appName = appInfo.getName().getValue();
			File file = new File("./src/storeapp/StoreApp_"+appName+".java");
			if(!file.exists()) {
				PrintWriter pw = new PrintWriter(file);
				String temp = sb.toString();
				temp = temp.replaceAll("ClassName","StoreApp_"+appName);
				pw.write(temp);
				pw.flush();
				pw.close();
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
	}

	public void setRunButtonDisable(boolean value) {
		runBtn.setDisable(value);
	}
	
	public List<AppInfo> getTableRows() {
		
		return tcTable.getItems();
	}
	
	public boolean isInstall() {
		return installCheck.selectedProperty().getValue();
	}
	
	public boolean isLaunch() {
		return launchCheck.selectedProperty().getValue();
	}
	
	public boolean isExploratory() {
		return exploratoryCheck.selectedProperty().getValue();
	}
	
	public boolean isCloseCheck() {
		return closeCheck.selectedProperty().getValue();
	}
	
	public boolean isUninstallCheck() {
		return uninstallCheck.selectedProperty().getValue();
	}
	
	public boolean isCrash() {
		return crashCheck.selectedProperty().getValue();
	}
	
	public void toggleRunServerBtn() {
		runSuspendBtn.setDisable(!runSuspendBtn.isDisabled());
	}
	
	public void toggleInterfaceBtn() {
		refreshBtn.setDisable(!refreshBtn.isDisabled());
	}
	
	public void browseBtnClicked() {
		File file = new File(System.getProperty("user.home"));
		
		JFileChooser jFileChooser = new JFileChooser(file);
		jFileChooser.setMultiSelectionEnabled(true);
		FileNameExtensionFilter filter = new FileNameExtensionFilter("App File", "tpk", "wgt", "rpm");
		jFileChooser.setAcceptAllFileFilterUsed(false);
		jFileChooser.addChoosableFileFilter(filter);
		int rVal = jFileChooser.showSaveDialog(jFileChooser);

		if (rVal == JFileChooser.APPROVE_OPTION) {
			File [] selectedFiles = jFileChooser.getSelectedFiles();
			ArrayList<AppInfo> appList = new ArrayList<AppInfo>();
			for (File f : selectedFiles) {
				AppInfo app = new AppInfo(f.getName().replaceAll(".wgt", "").replaceAll(".tpk", ""));
				try {
					app.setFullPath(f.getCanonicalPath());
				} catch (IOException e) {
					app.setFullPath(" ");
					e.printStackTrace();
				}
				generateJavaFileFromAppInfo(app);
				appList.add(app);
			}
			addAllToTcTable(appList);
			runBtnCheck();
		}
	}
	
	
	public void exploratoryCodeBtnClicked() {
		AppInfo selected = tcTable.getSelectionModel().getSelectedItem();
		
		openExploratoryCode(selected);
	}
	
	public void runBtnClicked() {
		clearConsole();
		JsoupXMLParser.writeXml(this);
		runBtn.setDisable(true);
		performCompileRun();
		writeSuspendFile("0");
//		TCRunner runner = SuiteRunner.getRunner();
//		new TCRunTask(runner, this).execute();
	}
	
	private void writeSuspendFile(String string) {
		try {
			BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter("./temp/suspend"));
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}

	public void rerunBtnClicked() {
		clearConsole();

	}
	

	public void runsingleBtnClicked() {
		clearConsole();

	}
	

	public void refreshBtnClicked() {
		clearConsole();
	 	//interfaceTask = new LaunchInterfaceTask(this);
	 	//interfaceTask.execute();	
	}
	
	
	
	public void runSuspendBtnClicked() {
		clearConsole();
		//runServerTask = new RunServerTask(this);
		//runServerTask.execute();
	}
	
	
	
	public TextArea getConsole() {
		return console;
	}




	public void listFilesForFolder(final File folder, TreeItem<String> root) {
//		List<String> suiteNames = new ArrayList<String>();
//		for (final File fileEntry : folder.listFiles()) {
//			if (fileEntry.isDirectory()) {
//				listFilesForFolder(fileEntry, root);
//			} else {
//				// System.out.println(fileEntry.getName());
//				//TreeItem<String> item = new TreeItem<>(fileEntry.getName().split("\\.")[0]);
//				//root.getChildren().add(item);
//				suiteNames.add(fileEntry.getName().split("\\.")[0]);
//			}
//		}
//		
//		Collections.sort(suiteNames);
//		for (String string : suiteNames) {
//			TreeItem<String> item = new TreeItem<>(string);
//			root.getChildren().add(item);
//		}
		
//		root.getChildren().add(new TreeItem<String>("Mobile"));
//		root.getChildren().add(new TreeItem<String>("Wearable"));
	}

	@Override
	public void initialize(URL location, ResourceBundle resources) {
		if(console == null) 
			System.out.println("[log] Console is null");
		
		CustomConsole customConsole = new CustomConsole(console);
		PrintStream ps = new PrintStream(customConsole);
		
//		System.setOut(ps);
//		System.setErr(ps);

//		TreeItem<String> treeRoot = new TreeItem<>("Store App");
//		listFilesForFolder(new File(SUITE_FILES_FOLDER), treeRoot);

//		suiteTree.getSelectionModel().selectedItemProperty().addListener(this);
//		treeRoot.setExpanded(true);
		
		tcTable.setOnMouseClicked( new EventHandler<MouseEvent>() {

			@Override
			public void handle(MouseEvent event) {
//				
//				 if ( event.getClickCount() == 2  ) {
//					    TestInfo selectedTcInfo = tcTable.getSelectionModel().getSelectedItem();
//			            System.out.println(ResourceUtils.getErrorScreenshotPath()+SuiteRunner.getRunner().getSuiteName()+"/"+tcTable.getSelectionModel().getSelectedItem().getTcName()+".png");
//			            if(selectedTcInfo.getResult().equals(TCResult.Fail)) {
//			            	 imagePopupWindowShow(ResourceUtils.getErrorScreenshotPath()+SuiteRunner.getRunner().getSuiteName()+"/"+selectedTcInfo.getTcName()+".png");
//			            }
//			           
//			     }
			}
		});

//		suiteTree.setRoot(treeRoot);

		install.setStyle("-fx-alignment: CENTER;");
		launch.setStyle("-fx-alignment: CENTER;");
		exploratory.setStyle("-fx-alignment: CENTER;");
		close.setStyle("-fx-alignment: CENTER;");
		uninstall.setStyle("-fx-alignment: CENTER;");
		crash.setStyle("-fx-alignment: CENTER;");

		
		runBtnCheck();
		
		installCheck.setOnAction(this);
		launchCheck.setOnAction(this);
		exploratoryCheck.setOnAction(this);
		uninstallCheck.setOnAction(this);
		closeCheck.setOnAction(this);
		crashCheck.setOnAction(this);
		
		installCheck.setSelected(true);
		launchCheck.setSelected(true);
		exploratoryCheck.setSelected(true);
		uninstallCheck.setSelected(true);
		closeCheck.setSelected(true);
		
		
		
		appName.setCellValueFactory(new PropertyValueFactory<AppInfo, String>("appName"));
		
		install.setCellValueFactory(new PropertyValueFactory<AppInfo, String>("install"));
		
		launch.setCellValueFactory(new PropertyValueFactory<AppInfo, String>("launch"));
		
		exploratory.setCellValueFactory(new PropertyValueFactory<AppInfo, String>("exploratory"));
		
		close.setCellValueFactory(new PropertyValueFactory<AppInfo, String>("close"));
		
		uninstall.setCellValueFactory(new PropertyValueFactory<AppInfo, String>("uninstall"));
		
		crash.setCellValueFactory(new PropertyValueFactory<AppInfo, String>("crash"));
		
		
		rerunBtn.setDisable(true);
		runSingleBtn.setDisable(true);
	}

	public void clearConsole() {

		Platform.runLater(() -> console.clear());
	}
	
	public void toggleRunButton() {
		runBtn.setDisable(!runBtn.isDisable());
	}
	
    public void imagePopupWindowShow(String imgPath) {

        File imageFile;
        Image image;
        ImageView imageView; 
        BorderPane pane;
        Scene scene;
        Stage stage;
        
        imageFile = new File(imgPath);
        image = new Image(imageFile.toURI().toString());
        imageView = new ImageView(image);

        // Image will sit in the middle of our popup.
        pane = new BorderPane();
        pane.setCenter(imageView);
        scene = new Scene(pane);

        // Create the actual window and display it.
        stage = new Stage();
        stage.setScene(scene);
        // Without this, the audio won't stop!
        stage.setOnCloseRequest(
            e -> {
                e.consume();
                stage.close();
            }
        );
        stage.showAndWait();
    }

//	@Override
//	public void changed(ObservableValue observable, Object oldValue, Object newValue) {
//
//		TreeItem<String> selectedItem = (TreeItem<String>) newValue;
//
//		if(selectedItem.getValue().equals("Storeapp Automation")) {
//			return;
//		}
//
//		TCRunner runner = null;
//		try {
//			runner = SuiteRunner.getAppRunner(selectedItem.getValue());
//		} catch (IOException e) {
//			e.printStackTrace();
//		}
//
//		resetTctable(runner.getAppInfoList());
//	}

	public void addToTcTable(AppInfo tc) {
		runBtn.setDisable(false);
		Platform.runLater(new Runnable() {

			@Override
			public void run() {
				tcTable.getItems().add(tc);
			}
		});

	}

	public void addAllToTcTable(List<AppInfo> appList) {
		runBtn.setDisable(false);
		Platform.runLater(new Runnable() {

			@Override
			public void run() {
				for (AppInfo app : appList) {
					if(!getTableRows().contains(app)) {
						addToTcTable(app);
					}
				}
			}
		});
	}

	public void removeAllFromTcTable() {


		Platform.runLater(new Runnable() {

			@Override
			public void run() {
				ObservableList<AppInfo> data = tcTable.getItems();				
				data.remove(0, data.size());

			}
		});
	} 

	public void resetTctable(List<AppInfo> newList) {

		removeAllFromTcTable();
		addAllToTcTable(newList);
	}
	
	private void performCompileRun() {

		new Thread(new Runnable() {

			@Override
			public void run() {
				String currentWorkingDirectory = System.getProperty("user.dir");
				ProcessBuilder compile, run;
				Process compileProcess, runProcess;

				try {
					if (!isWindows()) {
						compile = new ProcessBuilder("/bin/sh", "-c","javac -d "+
								currentWorkingDirectory + "/bin -cp "+ currentWorkingDirectory
										+ "/AFEngine/lib/*" + ":"+currentWorkingDirectory + "/lib/*:" + currentWorkingDirectory + "/src "+
								currentWorkingDirectory + "/src/apprunner/Main.java "+ currentWorkingDirectory + "/src/storeapp/*.java");
					} else {
						compile = new ProcessBuilder("cmd", "/c", "javac -d "+
								currentWorkingDirectory + "/bin -cp "+ currentWorkingDirectory
								+ "/AFEngine/lib/*" + ";"+currentWorkingDirectory + "/lib/*;" + currentWorkingDirectory + "/src "+
						currentWorkingDirectory + "/src/apprunner/Main.java "+ currentWorkingDirectory + "/src/storeapp/*.java");
					}
					
					compileProcess = compile.start();
					
					String line = "";
					BufferedReader msgReader = new BufferedReader(new InputStreamReader(compileProcess.getErrorStream()));
					BufferedReader errReader = new BufferedReader(new InputStreamReader(compileProcess.getErrorStream()));
					
					while ((line = msgReader.readLine()) != null) {
						System.out.println(line);
					}
					
					int returnCode = compileProcess.waitFor();
					
					msgReader.close();
					errReader.close();					
					compileProcess.destroy();
					
					if (returnCode == 0) {
						if (!isWindows()) {
							run = new ProcessBuilder("/bin/sh", "-c",
									"java -cp " + currentWorkingDirectory + "/AFEngine/lib/*:" + currentWorkingDirectory + "/lib/*:"
											+ currentWorkingDirectory + "/bin apprunner.Main");
						} else {
							run = new ProcessBuilder("cmd", "/c",
									"java -cp " + currentWorkingDirectory + "/AFEngine/lib/*;" + "lib/*;"
											+ currentWorkingDirectory + "/bin apprunner.Main");
						}
						
						System.out.println("[log] Start execution...");
						
						runProcess = run.start();
						msgReader = new BufferedReader(new InputStreamReader(runProcess.getInputStream()));
						errReader = new BufferedReader(new InputStreamReader(runProcess.getErrorStream()));	
						
						StringBuffer msgSb = new StringBuffer();
						StringBuffer errSb = new StringBuffer();
//						char m = 0 ;
						String sm,se;
//						char e = 0 ;
						
						while(true) {
							try{
								runProcess.exitValue();
								break;
							}catch(IllegalThreadStateException ex){
								
							}
							
							while (msgReader.ready()) {
								sm = msgReader.readLine();
								msgSb.append(sm);
//								if(m == 10) {
//									codeBox.getConsoleArea().setText(codeBox.getConsoleArea().getText()+msgSb.toString()+"");
								
								System.out.println(msgSb.toString());

								if(sm.contains("[result]")) {
									sm = sm.replaceAll("\\]\\[", " ");
									sm = sm.replaceAll("\\[", "");
									sm = sm.replaceAll("\\]", "");	
									
									Scanner sc = new Scanner(sm);
									sc.next();
									AppInfo app = new AppInfo(sc.next());
									
									String tcName = sc.next();
									sc.next();
									String result = sc.next();
									
									List<AppInfo> appList = getTableRows(); 
									
									for (AppInfo appInfo : appList) {
										if(appInfo.equals(app)) {
											if(tcName.equals("install")) {
												appInfo.getInstall().setValue(result);
											} else if(tcName.equals("launch")) {
												appInfo.getLaunch().setValue(result);
											} else if(tcName.equals("exploratory")) {
												appInfo.getExploratory().setValue(result);
											} else if(tcName.equals("close")) {
												appInfo.getClose().setValue(result);
											} else if(tcName.equals("uninstall")) {
												appInfo.getUninstall().setValue(result);
											} else if(tcName.equals("detectCrash")) {
												appInfo.getDetectCrash().setValue(result);
											}
										}
									}
									sc.close();
								}
								
								msgSb = new StringBuffer();
//								}
									
							}
							
							while (errReader.ready()) {
								se = errReader.readLine();
								errSb.append(se);
//								if(e == 10) {
//									codeBox.getConsoleArea().setText(codeBox.getConsoleArea().getText()+errSb.toString()+"");									
									System.out.println(errSb.toString());
									errSb = new StringBuffer();
//								}
							}
							
							Thread.sleep(10);
						}
						
						msgReader.close();
						errReader.close();
						runProcess.destroy();
						System.out.println("[log] Execution is completed....");
					}

				} catch (Exception e) {

					e.printStackTrace();
				}	
				
				runBtn.setDisable(false);
			}
		}).start();
	}
	
	public void runBtnCheck() {
		if(getTableRows().size() > 0 ) {
			if(installCheck.selectedProperty().getValue() ||
			   uninstallCheck.selectedProperty().getValue() || 
			   exploratoryCheck.selectedProperty().getValue() || 
			   crashCheck.selectedProperty().getValue() ||
			   closeCheck.selectedProperty().getValue() || 
			   launchCheck.selectedProperty().getValue()) {				
				runBtn.setDisable(false);
			} else {
				runBtn.setDisable(true);
			}
		} else {
			runBtn.setDisable(true);
		}
	}
	
	private boolean isWindows() {
		String osName = System.getProperty("os.name");

		if (osName.toLowerCase().contains("windows")) {
			return true;
		}
		return false;
	}

	@Override
	public void handle(ActionEvent event) {
		if (event.getSource() instanceof CheckBox) {
			CheckBox chk = (CheckBox) event.getSource();
			
			if ("Exploratory".equals(chk.getText())) {
				if(chk.selectedProperty().getValue()) {
					installCheck.setSelected(true);
					launchCheck.setSelected(true);

				}

			} else if ("Launch".equals(chk.getText())) {
				if(chk.selectedProperty().getValue()) {
					installCheck.setSelected(true);

				} else {
					exploratoryCheck.setSelected(false);
					closeCheck.setSelected(false);
					crashCheck.setSelected(false);
				}
			}  else if ("Close".equals(chk.getText())) {
				if(chk.selectedProperty().getValue()) {
					installCheck.setSelected(true);
					launchCheck.setSelected(true);

				}
			} else if ("Uninstall".equals(chk.getText())) {
				if(chk.selectedProperty().getValue()) {
					installCheck.setSelected(true);

				}
			} else if ("Detect Crash".equals(chk.getText())) {
				if(chk.selectedProperty().getValue()) {
					installCheck.setSelected(true);
					launchCheck.setSelected(true);

				}
			} else if ("Install".equals(chk.getText())) {
				if(!chk.selectedProperty().getValue()) {
					launchCheck.setSelected(false);
					exploratoryCheck.setSelected(false);
					closeCheck.setSelected(false);
					uninstallCheck.setSelected(false);
					crashCheck.setSelected(false);

				}             
			}
			runBtnCheck();
		}
	}
	
	public void openExploratoryCode(AppInfo selected) {
		
		String [] parts = readexploratoryCode(selected);
		
		Stage primaryStage = new Stage();
		primaryStage.initStyle(StageStyle.DECORATED);	
		primaryStage.setTitle("Exploratory Code");
		primaryStage.setResizable(false);
		 Group root = new Group();
	        
	        TextArea textArea = new TextArea(parts[0]+parts[1].trim().replace("null", "")+parts[2]);
	        textArea.setPrefHeight(360);

	        Button buttonSave = new Button("Save");
	        buttonSave.setPrefWidth(100);        
	        buttonSave.setOnAction((ActionEvent event) -> {
	           /* FileChooser fileChooser = new FileChooser();
	            
	            //Set extension filter
	            FileChooser.ExtensionFilter extFilter = 
	                new FileChooser.ExtensionFilter("TXT files (*.txt)", "*.txt");
	            fileChooser.getExtensionFilters().add(extFilter);
	            
	            //Show save file dialog
	            File file = fileChooser.showSaveDialog(primaryStage);
	            
	            if(file != null){
	                SaveFile(textArea.getText(), file);
	            }*/
	        });
	        
	        
	        Button buttonClose = new Button("Close");
	        buttonClose.setPrefWidth(100);        
	        buttonClose.setOnAction((ActionEvent event) -> {
	           primaryStage.close();
	        });
	        
	        HBox hbox = new HBox();
	        hbox.getChildren().addAll(buttonSave, buttonClose);
	        hbox.setSpacing(50);
	        hbox.setAlignment(Pos.CENTER);
	        hbox.setPrefHeight(25.0);
	        
	        VBox vBox = new VBox();
	        vBox.setAlignment(Pos.CENTER);
	        vBox.getChildren().addAll(textArea, hbox);
	        
	        root.getChildren().add(vBox);
	        
	        primaryStage.setScene(new Scene(root, 500, 400));
	        primaryStage.show();



	}
	
	private String[] readexploratoryCode(AppInfo selected) {
		try {
			Scanner sc = new Scanner(new File("./src/storeapp/StoreApp_"+selected.getName().getValue()+".java"));
			String expLine = "\tpublic void exploratory() {";
			String endLine = "\tpublic void close() {";
			String [] parts = new String[3];
			int currentIndex = 0;
			
			while(sc.hasNextLine()) {
				String line = sc.nextLine();
				if(line.equals(expLine)) {
					parts[currentIndex] += line + "\n";
					currentIndex++;
				} else if(line.equals(endLine)) {
					currentIndex++;
					parts[currentIndex] += "\n"+line.trim().replace("null", "") + "\n";
				} else {
					parts[currentIndex] += line + "\n";
				}
			}
			
			sc.close();
			parts[1] = parts[1].substring(0, parts[1].length()-1);
			parts[2] += "}" + parts[2] 
			return parts;
		} catch (FileNotFoundException e) {
			
			e.printStackTrace();
		}
		return null;
	}
	
}
