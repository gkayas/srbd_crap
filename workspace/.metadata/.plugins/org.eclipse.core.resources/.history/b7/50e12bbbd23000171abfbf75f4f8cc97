package uva;

import java.util.HashMap;
import java.util.Stack;

public class LeetCode {
	
	public static void main(String [] args) {
		LeetCode o= new LeetCode();
//		System.out.println(new LeetCode().isValid("([]"));
		Node h1;
		Node n1 = new Node(3);
		h1 = n1;
		n1.next = new Node(4);
		n1 = n1.next;
		n1.next = new Node(8);
		n1 = n1.next;
		n1.next = new Node(9);
		n1 = n1.next;
		n1.next = new Node(13);
		
		Node h2;
		Node n2 = new Node(2);
		h2 = n2;
		n2.next = new Node(7);
		n2 = n2.next;
		n2.next = new Node(12);
		
		o.print(h1);
		o.print(h2);
		o.print(o.merge(h1, h2));
	} 
	
	
	//13 start
	private static final HashMap<Character, Integer> map = new HashMap<Character, Integer>();
	
	static{
		map.put('I', 1);
		map.put('V', 5);
		map.put('X', 10);
		map.put('L', 50);
		map.put('C', 100);
		map.put('D', 500);
		map.put('M', 1000);
	}
	
	public int romanToInt(String s) {
        int val = 0;
        int cursor = 0;
        char[] ch = s.toCharArray();
        for (int i = ch.length-1; i>=0; i--) {
        	int currentVal = map.get(ch[i]);
        	if(currentVal < cursor) {
        		val -= currentVal;
        	} else {
        		val += currentVal;
        	}
			cursor = currentVal;
		}
        return val;
    }
	//13 ends
	
	//20 starts
	
	
	 public boolean isValid(String s) {
		Stack<Character> stack = new Stack<Character>();
		
		char [] ch = s.toCharArray();
	    for(int i = 0; i<ch.length; i++) {
	    	switch(ch[i]) {
	    	case '(' :
	    		stack.push(')');
	    		break;
	    	case '[' :
	    		stack.push(']');
	    		break;
	    	case '{' :
	    		stack.push('}');
	    		break;
	    	default:
	    		try{
	    			char head = stack.pop();
	    			if(head != ch[i]){
	    				return false;
	    			} else {
	    				
	    			}

	    		}catch (Exception e) {
	    			return false; 
				}
	    		break;
	   		
	    	}
	    	
	    }
	    return stack.empty();
	 }
	//20 ends
	 
	 Node merge(Node n1, Node n2) {
		Node s1,e1,c1,l1,l2;
		s1 = e1 = c1 = n1;
		l1 = l2 = n2;
		while(c1 != null && null != l2) {
			if(c1.val > l2.val) {
				l1 = l2;
				l2 = l2.next;
				e1 = c1;
				
//				System.out.println("C1: "+c1.val);
//				System.out.println("E1: "+e1.val);
//				System.out.println("L1: "+l1.val);
//				System.out.println("L2: "+l2.val);
				System.out.println("***********************");
			} else {
				l1.next = s1; 
				e1.next = l2;
				l1 = e1;
				s1 = e1 = c1;
//				System.out.println("C1: "+c1.val);
//				System.out.println("E1: "+e1.val);
//				System.out.println("L1: "+l1.val);
//				System.out.println("L2: "+l2.val);
				System.out.println("###################");
				c1 = c1.next;
			}
//			c1 = c1.next;
		}
		 
		return n2;
	 }
	 
	 void print(Node n) {
		 while(null != n) {
			 System.out.print(n.val+"->");
			 n = n.next;
		 }
		 System.out.println();
	 }
}

class Node{
	int val;
	Node next;
	public Node(int v) {val = v;}
}