package application;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.ResourceBundle;

import org.sikuli.script.Mouse;

import device.ResourceUtils;
import javafx.application.Platform;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;

import javafx.collections.ObservableList;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableColumn.CellDataFeatures;
import javafx.scene.control.TableView;
import javafx.scene.control.TextArea;
import javafx.scene.control.TreeItem;
import javafx.scene.control.TreeView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;
import javafx.util.Callback;
import refapp.AppInfo;
import refapp.ReportUtils;
import refapp.SuiteRunner;
import refapp.TCResult;
import refapp.TCRunner;
import refapp.TestInfo;
import sdk.UtilityBase;


public class MainController implements Initializable, ChangeListener{

	public static final String SUITE_FILES_FOLDER = ResourceUtils.getXmlPath();

	static LaunchInterfaceTask interfaceTask;
	static RunServerTask runServerTask;
	@FXML
	TreeView<String> suiteTree;

	@FXML
	private TableView<TestInfo> tcTable;

	@FXML
	private TableColumn<TestInfo, String> name;

	@FXML
	private TableColumn<TestInfo, String> binary;

	@FXML
	private TableColumn<TestInfo, String> install;
	
	@FXML
	private TableColumn<TestInfo, String> exploratory;
	
	@FXML
	private TableColumn<TestInfo, String> uninstall;

	@FXML
	private Button runBtn;

	@FXML
	private Button rerunBtn;

	@FXML
	private Button runsingleBtn;
	
	@FXML
	private Button runServerBtn;
	
	@FXML
	private Button interfaceBtn;

	@FXML
	private TextArea console;
	
	public void runBtnClicked() {
		clearConsole();
		TCRunner runner = SuiteRunner.getRunner();
		new TCRunTask(runner, this).execute();
	}
	
	public void toggleRunServerBtn() {
		runServerBtn.setDisable(!runServerBtn.isDisabled());
	}
	
	public void toggleInterfaceBtn() {
		interfaceBtn.setDisable(!interfaceBtn.isDisabled());
	}
	
	public void runServerBtnClicked() {
		runServerTask = new RunServerTask(this);
		runServerTask.execute();
	}
	
	public void interfaceBtnClicked() {
	 	interfaceTask = new LaunchInterfaceTask(this);
	 	interfaceTask.execute();
	}
	
	public TextArea getConsole() {
		return console;
	}

	public void rerunBtnClicked() {
		clearConsole();
		TCRunner runner = SuiteRunner.getRunner();
		new TCReRunTask(runner, this).execute();
	}

	public void runsingleBtnClicked() {
		clearConsole();
		TCRunner runner = SuiteRunner.getRunner();
		TestInfo selectedTc =  tcTable.getSelectionModel().getSelectedItem();
		System.out.println(selectedTc.getTcName());
		new TCRunSingle(runner, selectedTc.getTcName()).execute();;
	}

	public void listFilesForFolder(final File folder, TreeItem<String> root) {
		List<String> suiteNames = new ArrayList<String>();
//		for (final File fileEntry : folder.listFiles()) {
//			if (fileEntry.isDirectory()) {
//				listFilesForFolder(fileEntry, root);
//			} else {
//				// System.out.println(fileEntry.getName());
//				//TreeItem<String> item = new TreeItem<>(fileEntry.getName().split("\\.")[0]);
//				//root.getChildren().add(item);
//				suiteNames.add(fileEntry.getName().split("\\.")[0]);
//			}
//		}
//		
//		Collections.sort(suiteNames);
//		for (String string : suiteNames) {
//			TreeItem<String> item = new TreeItem<>(string);
//			root.getChildren().add(item);
//		}
		
		root.getChildren().add(new TreeItem<String>("Mobile"));
	}

	@Override
	public void initialize(URL location, ResourceBundle resources) {

		// Redirecting sysout to textArea

		if(console == null) System.out.println("Console null");
		CustomConsole customConsole = new CustomConsole(console);
		PrintStream ps = new PrintStream(customConsole);
		System.setOut(ps);
		System.setErr(ps);

		TreeItem<String> treeRoot = new TreeItem<>("Storeapp Automation");
		listFilesForFolder(new File(SUITE_FILES_FOLDER), treeRoot);

		suiteTree.getSelectionModel().selectedItemProperty().addListener(this);
		treeRoot.setExpanded(true);
		
		tcTable.setOnMouseClicked( new EventHandler<MouseEvent>() {

			@Override
			public void handle(MouseEvent event) {
//				
//				 if ( event.getClickCount() == 2  ) {
//					    TestInfo selectedTcInfo = tcTable.getSelectionModel().getSelectedItem();
//			            System.out.println(ResourceUtils.getErrorScreenshotPath()+SuiteRunner.getRunner().getSuiteName()+"/"+tcTable.getSelectionModel().getSelectedItem().getTcName()+".png");
//			            if(selectedTcInfo.getResult().equals(TCResult.Fail)) {
//			            	 imagePopupWindowShow(ResourceUtils.getErrorScreenshotPath()+SuiteRunner.getRunner().getSuiteName()+"/"+selectedTcInfo.getTcName()+".png");
//			            }
//			           
//			     }
			}
		});

		suiteTree.setRoot(treeRoot);

		name.setCellValueFactory(new PropertyValueFactory<AppInfo, String>("name"));

		binary.setCellValueFactory(new PropertyValueFactory<TestInfo, String>("binary"));
		
		tcRemark.setCellValueFactory(new PropertyValueFactory<TestInfo, String>("tcRemark"));
		
	}

	public void clearConsole() {

		Platform.runLater(() -> console.clear());
	}
	
    public void imagePopupWindowShow(String imgPath) {

        File imageFile;
        Image image;
        ImageView imageView; 
        BorderPane pane;
        Scene scene;
        Stage stage;
        
        imageFile = new File(imgPath);
        image = new Image(imageFile.toURI().toString());
        imageView = new ImageView(image);

        // Image will sit in the middle of our popup.
        pane = new BorderPane();
        pane.setCenter(imageView);
        scene = new Scene(pane);

        // Create the actual window and display it.
        stage = new Stage();
        stage.setScene(scene);
        // Without this, the audio won't stop!
        stage.setOnCloseRequest(
            e -> {
                e.consume();
                stage.close();
            }
        );
        stage.showAndWait();
    }

	@Override
	public void changed(ObservableValue observable, Object oldValue, Object newValue) {

		TreeItem<String> selectedItem = (TreeItem<String>) newValue;

		if(selectedItem.getValue().equals("Storeapp Automation")) {
			return;
		}

		TCRunner runner = null;
//		try {
//			runner = SuiteRunner.getTCRunner(selectedItem.getValue());
//		} catch (IOException e) {
//			e.printStackTrace();
//		}
//		List<TestInfo> tcList = runner.getTestInfo();
//		//		removeAllFromTcTable();
//		//		addAllToTcTable(tcList);
//		resetTctable(tcList);
	}

	public void addToTcTable(TestInfo tc) {
		Platform.runLater(new Runnable() {

			@Override
			public void run() {
				tcTable.getItems().add(tc);
			}
		});

	}

	public void addAllToTcTable(List<TestInfo> tcList) {
		Platform.runLater(new Runnable() {

			@Override
			public void run() {
				for (TestInfo testcase : tcList) {
					addToTcTable(testcase);
				}
			}
		});
	}

	public void removeAllFromTcTable() {


		Platform.runLater(new Runnable() {

			@Override
			public void run() {
				ObservableList<TestInfo> data = tcTable.getItems();				
				data.remove(0, data.size());

			}
		});


	} 

	public void resetTctable(List<TestInfo> newList) {

		removeAllFromTcTable();
		addAllToTcTable(newList);
	}

}
