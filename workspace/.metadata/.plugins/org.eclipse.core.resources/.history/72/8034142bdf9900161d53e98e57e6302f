import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.FileVisitResult;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;

public class Utils {
	private static HashMap<String, String> devInfo = new HashMap<String, String>(); 
	
	

	private static void createDirectory(File directory) {
		if(!directory.exists()){
			try {
				directory.mkdir();
			} catch (SecurityException e) {
				System.out.println("Can not create platform specific result folder...");
			}
		}
	}
	
	public static void createInitialDirectory() {
		createDirectory(new File(getValue(Constants.TEST_RESULT)));
		createDirectory(new File(getValue(Constants.AUTOMATION_WORKSPACE)));
//		createDirectory(new File(getValue(Constants.TEST_RESULT) + "/" + getValue(Constants.PLATFORM_VERSION)));		
	}
	
	public static void readParameterVariable() {
		String filePath;
		filePath = "./" + Constants.CONFIG_FILE;
		
		try {		
			Scanner sc = new Scanner(new File(filePath));
			while(sc.hasNextLine()){
				String line = sc.nextLine();
				String tokens[] = line.split("=");
				devInfo.put(tokens[0].trim(), tokens[1].trim());
			}
			
			sc.close();
			
			File file = new File("..");
			String suffixPath = file.getCanonicalPath();
			
			String rootPath = "";
			if(isWindows())	{
				rootPath = System.getenv("WINDIR");
				rootPath = rootPath.replace("\\Windows", "");
			} else {
				rootPath = System.getProperty("user.home");
			}
				
			devInfo.put(Constants.PROJECT, suffixPath + File.separatorChar + getValue(Constants.PROJECT_NAME));
			devInfo.put(Constants.RUNNER, suffixPath + File.separatorChar + getValue(Constants.RCPTT_VERSION) + File.separatorChar + "eclipse");
			
			
			devInfo.put(Constants.AUTOMATION_WORKSPACE, rootPath + File.separatorChar + "automation.workspace");			
			devInfo.put(Constants.RUNNER_WORKSPACE, getValue(Constants.AUTOMATION_WORKSPACE) + File.separatorChar + "runner-workspace");
			devInfo.put(Constants.AUT_WORKSPACE, getValue(Constants.AUTOMATION_WORKSPACE) + File.separatorChar + "aut-workspace");
			devInfo.put(Constants.AUT_OUT, getValue(Constants.AUTOMATION_WORKSPACE) + File.separatorChar + "aut-out-");
			devInfo.put(Constants.JUNIT_REPORT, getValue(Constants.AUTOMATION_WORKSPACE) + File.separatorChar + "results.xml");			
			devInfo.put(Constants.SOURCE_XML_PATH, getValue(Constants.AUTOMATION_WORKSPACE) + File.separatorChar + "results.junit.xml");
			
			devInfo.put(Constants.TEST_RESULT, suffixPath + File.separatorChar + "results");
//			devInfo.put(Constants.FAIL_LIST, suffixPath + File.separatorChar + "results" + File.separatorChar + getValue(Constants.PLATFORM_VERSION) + File.separatorChar + "faillist");			
//			devInfo.put(Constants.RESULT_HTML_PATH, suffixPath + File.separatorChar + "results" + File.separatorChar + getValue(Constants.PLATFORM_VERSION) + File.separatorChar + "result.html");		

		} catch (FileNotFoundException e) {
			System.out.println("ParameterVariable file not found...");
		} catch (Exception e) {
			System.out.println("ParameterVariable file format is not correct...");			
		}	
	}
	
	
	public static boolean writeParameterVariable() {
		String fileName = getValue(Constants.PROJECT)+File.separatorChar+"Common"+File.separatorChar+"Configurations"+File.separatorChar+"ParametersVariable.ctx";
		try {
			Scanner sc = new Scanner(new File(fileName));
			StringBuffer sb = new StringBuffer();
			while(sc.hasNextLine()) {
				String line = sc.nextLine();
				
				String [] parts = line.split("=");
				if(parts[0].equals(Constants.SDB_VERSION)) {
					sb.append(Constants.SDB_VERSION+"="+Utils.getValue(Constants.SDB_VERSION));
				} else if(parts[0].equals(Constants.SERVER_PASSWORD)) {
					sb.append(Constants.SERVER_PASSWORD+"="+Utils.getValue(Constants.SERVER_PASSWORD));
				} else if(parts[0].equals(Constants.SERVER_ID)) {
					sb.append(Constants.SERVER_ID+"="+Utils.getValue(Constants.SERVER_ID));
				} else if(parts[0].equals(Constants.PROFILE_NAME)) {
					sb.append(Constants.PROFILE_NAME+"="+Utils.getValue(Constants.PROFILE_NAME));
				} else if(parts[0].equals(Constants.PLATFORM_VERSION)) {
					sb.append(Constants.PLATFORM_VERSION+"="+Utils.getValue(Constants.PLATFORM_VERSION));
				} else if(parts[0].equals(Constants.PROJECT)) {
					File current = new File(Utils.getValue(Constants.PROJECT));
					String projectPath = current.getCanonicalPath();

					if(isWindows()) {
						projectPath = projectPath.replace("\\", "\\\\");
						projectPath = projectPath.replace(":", "\\:");
						sb.append(Constants.PROJECT+"="+projectPath);
					} else {
						sb.append(Constants.PROJECT+"="+projectPath);
					}
					
				} else {
					sb.append(line);
				}
				
				sb.append("\n");
			}
			
			sc.close();
			PrintWriter pw = new PrintWriter(new File(getValue(Constants.PROJECT)+File.separatorChar+"Common"+File.separatorChar+"Configurations"+File.separatorChar+"ParametersVariable.ctx"));
		
			pw.write(sb.toString());
			pw.flush();
			pw.close();
		} catch (IOException e) {
			System.out.println(fileName + " file not found...");
			return false;
		}
		
		return true;
	}
	
	public static String getValue(String key) {
		return devInfo.get(key);
	}
	
	public static boolean isWindows() {
		String osName = System.getProperty("os.name");

		if (osName.toLowerCase().contains("windows")) {
			return true;
		}
		return false;
	}


	public static String readTCList(String value) {
		File tcListFile = new File(value);
		if(!tcListFile.exists()) {
			System.out.println(value + " file does not exits...!!!");
			return "";
		} 
		String tcString = "";
		try {
			Scanner sc = new Scanner(tcListFile);
			
			boolean notEmpty = false;
			while(sc.hasNextLine()) {
				String line = sc.nextLine().trim();
				tcString += line+".test"+";";
				notEmpty = notEmpty||(line.length()>0);
			}
			sc.close();
			
			if(!notEmpty) {
				System.out.println(value + " file if empty...!!!");
				return "";
			} else {
				tcString = tcString.substring(0, tcString.length()-1);
			}
			
		} catch (FileNotFoundException e) {
			
			e.printStackTrace();
		}
		
		
		return tcString;
	}


	public static ArrayList<String> readSuiteList() {
		
		File suiteFile = new File("suitelist");
		ArrayList<String> suiteList = new ArrayList<String>();
		if(!suiteFile.exists()) {
			System.out.println("suitelist file does not exits...!!!");
			return null;
		}
		try {
			Scanner sc = new Scanner(suiteFile);
			
			while(sc.hasNextLine()) {
				String line = sc.nextLine().trim();
				if(line.length() > 0) {
					suiteList.add(line);
				}
			}
			sc.close();
		} catch (FileNotFoundException e) {
			
			e.printStackTrace();
		}
		
		if(suiteList.size() == 0) {
			System.out.println("suitlist file is empty...!!!");
			return null;
		}
		
		return suiteList;
	}
	
  public static void deleteFile(String filePath) {
	  File file = new File(filePath);	  
	  try {
		  Files.deleteIfExists(file.toPath());
      } catch (IOException e) {
		e.printStackTrace();
	}
  }
  
   public static void deleteFolder(String folderPath) {
        try {
            final Path directory = Paths.get(folderPath);
            Files.walkFileTree(directory, new SimpleFileVisitor<Path>() {
                @Override
                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
                    if(!directory.equals(file)) {
                    	Files.deleteIfExists(file);
                    }
                	return FileVisitResult.CONTINUE;
                }

                @Override
                public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {
                	if(!directory.equals(dir)) {
                		Files.deleteIfExists(dir);
                	}
                    return FileVisitResult.CONTINUE;
                }
            });
            
        } catch (Exception e) {
            //System.out.println("Folder not found: "+folderPath);
        }
    }
}
