package manager;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

import org.apache.log4j.Logger;

public class Vnc {
	private Device device;
	private static String serverRunCommand;

	public Vnc(Device device) {
		this.device = device;
	}

	private File getTizenInstaller() throws Exception {
		String installerDirectory = System.getProperty("user.dir") + File.separator + Constant.VNC_SERVER_PATH + "/Tizen/" + device.getVersion() + "/" + device.getProfile() + "/" + device.getType();
		File[] files =new File(installerDirectory).listFiles();
		int installerCount = 0;
		File installer = null;
		if(files == null) throw new Exception(installerDirectory + " not found");
		for (File file : files) {
			if (file.getName().contains(".rpm")){
				installer = file;
				installerCount++;
			}
		}
		if(installerCount == 0)
			throw new Exception("No installer foud in "+installerDirectory);
		else if(installerCount > 1)
			throw new Exception("More than one installer foud in "+installerDirectory);
		return installer;
	}

	private File getAndroidInstaller()  throws Exception {
		String installerDirectory = System.getProperty("user.dir") + File.separator + Constant.VNC_SERVER_PATH + "/Android/";
		File[] files =new File(installerDirectory).listFiles();
		int installerCount = 0;
		File installer = null;
		if(files == null) throw new Exception(installerDirectory + " not found");
		for (File file : files) {
			if (file.getName().contains(".apk")){
				installer = file;
				installerCount++;
			}
		}
		if(installerCount == 0)
			throw new Exception("No installer foud in "+installerDirectory);
		else if(installerCount > 1)
			throw new Exception("More than one installer foud in "+installerDirectory);
		return installer;
	}

	private int getIntValue(String stringVersion) {
		String[] intValues = stringVersion.split("\\.");
		int intVersion = 0;
		for (String intValue : intValues) {
			intVersion = intVersion*100 + Integer.parseInt(intValue);
		}
		return intVersion;
	}

	private int getAvailableVersion() throws Exception{
		return getIntValue(getTizenInstaller().getName().split("-")[1].trim());
	}

	private int getIntalledVersion() {
		ArrayList<String> commandOutLines = UtilsCLI.runCommand("sdb shell " + device.getRecommendedVNCtype() + " --version", null);
		for (String line : commandOutLines) {
			if(line.contains(device.getRecommendedVNCtype())){
				return getIntValue(line.split(" ")[1].trim());
			}
		}
		return 0;
	}

	private boolean isInstalledOlder() throws Exception {
		if (getAvailableVersion() > getIntalledVersion())
			return true;
		return false;
	}

	private boolean isInstalled() {
		ArrayList<String> commandOutLines = UtilsCLI.runCommand("sdb shell " + device.getRecommendedVNCtype() + " --help", null);
		for (String line : commandOutLines) {
			if(line.contains("command not found"))
				return false;
		}
		return true;
	}

	public void install() throws Exception {
		Logger logger = UtilsLogger.getLogger("install");

		if(device.isTizen()){
			UtilsCLI.runCommand("sdb root on",logger);
			UtilsCLI.runCommand("sdb shell rpm -e " + device.getRecommendedVNCtype(), logger);
			UtilsCLI.runCommand("sdb root off",logger);

			if(!isInstalled() || isInstalledOlder()){
				File installerFile = getTizenInstaller();
				System.out.println("Installing "+installerFile.getAbsolutePath());
				UtilsCLI.runCommand("sdb root on",logger);
				UtilsCLI.runCommand("sdb push " + installerFile.getAbsolutePath() + " /opt/home/root/",logger);
				boolean isChangebootingExist = true;
				ArrayList<String> commandOutLines = UtilsCLI.runCommand("sdb shell ls /usr/bin/change-booting-mode.sh", null);
				for (String line : commandOutLines) {
					if (line.contains("cannot access")){
						isChangebootingExist = false;
						break;
					}
				}
				if(isChangebootingExist) UtilsCLI.runCommand("sdb shell /usr/bin/change-booting-mode.sh --update",logger);
				UtilsCLI.runCommand("sdb shell rpm -Uvh --force --nodeps /opt/home/root/"+installerFile.getName(),logger);
				UtilsCLI.runCommand("sdb shell chsmack -a '_' /etc/ld.so.cache",logger);

				//UtilsCLI.runCommand("sdb shell \"sync && reboot\"",logger);
				//device.waitForReady();
				//System.out.println("VNC Server install successfully...");
			}
		}else if(device.isAndroid()){
			File installerFile = getAndroidInstaller();
			UtilsCLI.runCommand(UtilsCLI.getadb()  + " install -r " + installerFile.getAbsolutePath(),logger);
		}

	}

	public void runServer() throws Exception {
		Logger logger = UtilsLogger.getLogger("vncserver");

		if(device.isTizen()){
			killRunnigServer();
			Logger logger = UtilsLogger.getLogger("vncserver");
			UtilsCLI.runCommand("sdb root on",logger);
			UtilsCLI.runCommand("sdb forward --remove-all",logger);
			UtilsCLI.runCommand("sdb forward tcp:5900 tcp:5900",logger);
			UtilsCLI.runCommand("sdb shell \"echo \"xorg sdbd rwx\" > /sys/fs/smackfs/load2\"",logger);
			serverRunCommand = "";

			if (device.getProfile().contains(Constant.DEVICE_PROFILE_MOBILE)){
				if(device.getVersion().contains("3.0")){
					if(device.getType().contains(Constant.EMULATOR)){
						serverRunCommand = "sdb shell \"export XDG_RUNTIME_DIR=/run && /usr/bin/waylandvnc -rawfb console -scale 480x800 --threads";
					}else{
						serverRunCommand = "sdb shell \"export XDG_RUNTIME_DIR=/run && /usr/bin/waylandvnc -rawfb console -scale 480x800 --threads -pipeinput UINPUT:direct_btn=/dev/input/event0,direct_key=/dev/input/event1,nouinput";
					}
				}else{
					if(device.getType().contains(Constant.EMULATOR)){
						serverRunCommand = "sdb shell \"x11vnc -dk -modtweak -xkb -scale 480x800 -ncache_keep_anims -input KMB -threads -input_eagerly -noremote -nocmds -noxdamage -noxinerama";
					}else{
						serverRunCommand = "sdb shell \"x11vnc -pipeinput tee:UINPUT:K,direct_abs=/dev/input/event0 -dk -modtweak -xkb -scale 480x800 -ncache_keep_anims -input KMB -threads -input_eagerly -noremote -nocmds -noxdamage -noxinerama";
					}
				}

				serverRunCommand += " --rotate " + device.getRotation() + "\"";
			} else if (device.getProfile().contains(Constant.DEVICE_PROFILE_WEARABLE)){
				if(device.getVersion().contains("3.0")) {
					if(device.getScreenHeight() == device.getScreenWidth()){
						serverRunCommand = "sdb shell \"export XDG_RUNTIME_DIR=/run && /usr/bin/waylandvnc -rawfb console -scale 360x360 --threads -pipeinput UINPUT:direct_btn=/dev/input/event0,direct_key=/dev/input/event1,nouinput";
					}else{
						serverRunCommand = "sdb shell \"export XDG_RUNTIME_DIR=/run && /usr/bin/waylandvnc -rawfb console -scale 360x480 --threads -pipeinput UINPUT:direct_btn=/dev/input/event0,direct_key=/dev/input/event1,nouinput";
					}
				} else {
					if(device.getScreenHeight() == device.getScreenWidth()){
						serverRunCommand = "sdb shell \"x11vnc -pipeinput tee:UINPUT:K,direct_abs=/dev/input/event0 -dk -modtweak -xkb -scale 360x360 -ncache_keep_anims -input KMB -threads -input_eagerly -noremote -nocmds -noxdamage -noxinerama";
					}else{
						serverRunCommand = "sdb shell \"x11vnc -pipeinput tee:UINPUT:K,direct_abs=/dev/input/event0 -dk -modtweak -xkb -scale 360x480 -ncache_keep_anims -input KMB -threads -input_eagerly -noremote -nocmds -noxdamage -noxinerama";
					}
				}

				serverRunCommand += " --rotate " + device.getRotation() + "\"";
			} else if (device.getProfile().contains(Constant.DEVICE_PROFILE_TV)){

				UtilsCLI.runCommand("sdb shell touch /tmp/fb0",logger);

				if(device.getVersion().contains("3.0")){
					if(device.getType().contains(Constant.EMULATOR)){
						serverRunCommand = "sdb  shell 'export XDG_RUNTIME_DIR=/run && /usr/bin/waylandvnc -rawfb map:/tmp/fb0@1920x1080x32 -scale 960x540 --threads -pipeinput UINPUT:direct_btn=/dev/input/event3,direct_key=/dev/input/event4,nouinput -dk -dk'";
					}else{
						serverRunCommand = "sdb shell 'export XDG_RUNTIME_DIR=/run && /usr/bin/waylandvnc -rawfb map:/tmp/fb0@1920x1080x32 -scale 960x540 --threads -pipeinput UINPUT:direct_btn=/dev/input/event0,direct_key=/dev/input/event1,nouinput'";
					}
				}else{
					if(device.getType().contains(Constant.EMULATOR)){
						serverRunCommand = "sdb shell 'x11vnc -dk -modtweak -xkb -scale 960x540 -ncache_keep_anims -input KMB -threads -input_eagerly -noremote -nocmds -noxdamage -noxinerama'";
					}else{
						serverRunCommand = "sdb  shell 'x11vnc -pipeinput tee:UINPUT:K,direct_abs=/dev/input/event0 -dk -modtweak -xkb -scale 960x540 -ncache_keep_anims -input KMB -threads -input_eagerly -noremote -nocmds -noxdamage -noxinerama'";
					}
				}
			}

			new Thread(){
				@Override
				public void run() {
					UtilsCLI.runCommand(serverRunCommand,logger);
					super.run();
				}
			}.start();
		}else if(device.isAndroid()){
			String adb = UtilsCLI.getadb();
			UtilsCLI.runCommand(adb + " root on",logger);
			UtilsCLI.runCommand(adb + " forward --remove-all",logger);
			UtilsCLI.runCommand(adb + " forward tcp:5900 tcp:5900",logger);
			UtilsCLI.runCommand(adb + " shell am broadcast -a android.intent.action.BOOT_COMPLETED -n com.samsung.vncserver/.AutoStart",logger);
			//UtilsCLI.runCommand(adb + " shell am start -n \"" + Constant.NAME_PACKAGE + "/" + Constant.NAME_PACKAGE + "." + Constant.NAME_ACTIVITY_MAIN + "\" -a android.intent.action.MAIN -c android.intent.category.LAUNCHER" ,logger);
		}
	}

	private void killRunnigServer() {
		ArrayList<String> commandOutLines = UtilsCLI.runCommand("sdb shell \"ps aux | grep " + device.getRecommendedVNCtype() + " | grep -v grep\"", null);
		for (String line : commandOutLines) {
			Scanner scanner = new Scanner(line);
			scanner.next();
			UtilsCLI.runCommand("sdb shell kill " + scanner.next(), null);
			scanner.close();
		}

	}

	public void runClient(){
		Logger logger = UtilsLogger.getLogger("vncclient");
		File sourceFile = new File(Constant.VNC_CLIENT_CONFIG_PATH);
		File targetFile = new File(System.getProperty("user.home") + "/.java/.userPrefs/" + sourceFile.getName());
		try {
			UtilsFile.copy(sourceFile, targetFile);
		} catch (IOException e) {
			System.out.println(e.getMessage());
		}

		UtilsCLI.runCommand("java -jar "+ Constant.DEVICE_INTERFACE_PATH + " -Server 127.0.0.1::5900 -SecurityTypes None -Scale 100 -DesktopSize Server",logger);

	}

}
