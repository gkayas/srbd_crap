package com.turbovnc.vncviewer;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.Scanner;

import javax.imageio.ImageIO;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import javax.swing.text.Caret;

public class AndroidCodeGenerator extends CodeGenerator implements ICodeGenerator, ActionListener {

	protected static final String WRITE_CODE_FILE_NAME = "AndroidTC/src/TestCase.java";
	private CodeBox codeBox;
	private int deviceWidth, deviceHeight;
	private int windowWidth, windowHeight;
	private JTextArea rcpttTextArea;
	private boolean isCodeRunning = false;
	private long prevTime = 0;
	private long THRESHOLD_TIME = 1000000;
	
	public AndroidCodeGenerator(CConn cc_) {
		super(cc_);
		deviceWidth = cc.desktop.devicwidth;
		deviceHeight = cc.desktop.devicHeight;
		windowWidth = cc.desktop.width();
		windowHeight = cc.desktop.height();
	}
	
	public void writeTime()
	{
		long curTime = System.currentTimeMillis();
		
		if(curTime - prevTime > THRESHOLD_TIME)
		{
			prevTime = curTime;
			return;
		}
		
		if (null != codeBox) {
			Caret pos = codeBox.getCodeArea().getCaret();
			try {
				codeBox.getCodeArea().getDocument().insertString(pos.getDot(),
						"androidDriver.sleep(" + (curTime - prevTime) + ");\n",null);
				prevTime = curTime;
			} catch (BadLocationException e) {
				e.printStackTrace();
			}
		}
	}
	
	@Override
	public void actionPerformed(ActionEvent e) {
		JButton button = (JButton) e.getSource();
		if (button.getToolTipText().equals(CodeBox.menuButtonTips[0])) {
			writeCode();
			performCompileRun();
		}
		if (button.getToolTipText().equals(CodeBox.menuButtonTips[1])) {
			launchApp();
		}
		if (button.getToolTipText().equals(CodeBox.menuButtonTips[2])) {
			generateAreaCode();
		}
		if (button.getToolTipText().equals(CodeBox.menuButtonTips[3])) {
			// generateRCPTTCode();
			JFileChooser jFileChooser = new CustomFileChooser(System.getProperty("user.dir") + File.separator + "res" + File.separator + "ref_images");
			FileNameExtensionFilter filter = new FileNameExtensionFilter("PNG File", "png");
			jFileChooser.setSelectedFile(new File("screenshot.png"));
			jFileChooser.setDialogTitle("Save Capture Screen.");
			jFileChooser.addChoosableFileFilter(filter);

			 BufferedImage im = null;
			if (cc != null) {
				Image img = cc.getCurrentClientScreenImage();
				im =  toBufferedImage(img.getScaledInstance(img.getWidth(null), img.getHeight(null), Image.SCALE_DEFAULT));

				if (im != null) {
					int rVal = jFileChooser.showSaveDialog(jFileChooser);
					if (rVal == JFileChooser.APPROVE_OPTION) {
						String filePath = jFileChooser.getCurrentDirectory().toString().trim();
						String fileName = jFileChooser.getSelectedFile().getName();

						if (!fileName.toLowerCase().contains(".png")) {
							fileName = fileName.trim() + ".png";
						}

						File imgFile = new File(filePath + File.separator + fileName);

						try {
							ImageIO.write(im, "PNG", imgFile);
							if (null != codeBox) {
								Caret pos = codeBox.getCodeArea().getCaret();
								try {
									codeBox.getCodeArea().getDocument().insertString(pos.getDot(),
											"androidDriver.capture(\"\\res\\ref_images\", \"" + fileName + "\");\n",null);
								} catch (BadLocationException eb) {
									eb.printStackTrace();
								}
							}
						} catch (IOException e1) {

							e1.printStackTrace();
						}
					}
				} else {
					System.out.println("SaveScreen image is not saved...................");
				}
			}
		}
	}


	@Override
	public void pressMenu() {
		if (null != codeBox) {
			writeTime();
			Caret pos = codeBox.getCodeArea().getCaret();
			try {
				codeBox.getCodeArea().getDocument().insertString(pos.getDot(),
						"androidDriver.sendKeys(AndroidKeyCode.KEYCODE_MENU);\n",null);
			} catch (BadLocationException e) {
				e.printStackTrace();
			}
		}
	}

	@Override
	public void pressHome() {
		if (null != codeBox) {
			writeTime();
			Caret pos = codeBox.getCodeArea().getCaret();
			try {
				codeBox.getCodeArea().getDocument().insertString(pos.getDot(),
						"androidDriver.sendKeys(AndroidKeyCode.KEYCODE_HOME);\n",null);
			} catch (BadLocationException e) {
				e.printStackTrace();
			}
		}
	}

	@Deprecated
	@Override
	public void longPressHome() {
		if (null != codeBox) {
			writeTime();
			Caret pos = codeBox.getCodeArea().getCaret();
			try {
				codeBox.getCodeArea().getDocument().insertString(pos.getDot(),
						"androidDriver.longPressHome();\n",null);
			} catch (BadLocationException e) {
				e.printStackTrace();
			}
		}
	}

	@Override
	public void pressBack() {
		if (null != codeBox) {
			writeTime();
			Caret pos = codeBox.getCodeArea().getCaret();
			try {
				codeBox.getCodeArea().getDocument().insertString(pos.getDot(),
						"androidDriver.sendKeys(AndroidKeyCode.KEYCODE_BACK);\n",null);
			} catch (BadLocationException e) {
				e.printStackTrace();
			}
		}
	}

	@Override
	public void tapImage(String imagePath) {
		if (null != codeBox) {
			writeTime();
			Caret pos = codeBox.getCodeArea().getCaret();
			try {
				codeBox.getCodeArea().getDocument().insertString(pos.getDot(),
						"androidDriver.findElement(By.image(\"" + imagePath + "\")).click();\n",null);
			} catch (BadLocationException e) {
				e.printStackTrace();
			}
		}
	}

	@Override
	public void verifyImage(String fileName) {
		if (null != codeBox) {
			writeTime();
			Caret pos = codeBox.getCodeArea().getCaret();
			try {
				codeBox.getCodeArea().getDocument().insertString(pos.getDot(),
						"Assert.assertNotNull(\n"
								+ "\tandroidDriver.findElement(By.image(\"" + fileName + "\"))\n"
						+ ");\n",null);
			} catch (BadLocationException e) {
				e.printStackTrace();
			}
		}
	}

	@Override
	public void verifyText() {
		if (null != codeBox) {
			writeTime();
			Caret pos = codeBox.getCodeArea().getCaret();
			try {
				codeBox.getCodeArea().getDocument().insertString(pos.getDot(),
						"Assert.assertEquals(\n"
								+ "\t\"text\",\n"
								+ "\tandroidDriver.findElement(By.image(new Region(start_x, start_y, width, height))).getText()\n"
						+ ");\n",null);
			} catch (BadLocationException e) {
				e.printStackTrace();
			}
		}
	}

	@Override
	public void tapText() {
		if (null != codeBox) {
			writeTime();
			Caret pos = codeBox.getCodeArea().getCaret();
			try {
				codeBox.getCodeArea().getDocument().insertString(pos.getDot(),
						"Assert.assertEquals(\n"
								+ "\t\"text\",\n"
								+ "\tandroidDriver.findElement(By.image(new Region(start_x, start_y, width, height)))\n"
						+ ");\n",null);
			} catch (BadLocationException e) {
				e.printStackTrace();
			}
		}
	}

	@Override
	public void typeText() {
		if (null != codeBox) {
			writeTime();
			Caret pos = codeBox.getCodeArea().getCaret();
			try {
				codeBox.getCodeArea().getDocument().insertString(pos.getDot(),"androidDriver.typeText(\"text\");\n",null);
			} catch (BadLocationException e) {
				e.printStackTrace();
			}
		}
	}

	@Override
	public void swipe() {
		if (null != codeBox) {
			writeTime();
			Caret pos = codeBox.getCodeArea().getCaret();
			try {
				codeBox.getCodeArea().getDocument().insertString(pos.getDot(),
						"androidDriver.drag(start_x, start_y, end_x, end_y, 50);\n",null);
			} catch (BadLocationException e) {
				e.printStackTrace();
			}
		}
	}

	@Override
	public void launchApp() {
		if (null != codeBox) {
			writeTime();
			Caret pos = codeBox.getCodeArea().getCaret();
			try {
				codeBox.getCodeArea().getDocument().insertString(pos.getDot(),
						"androidDriver.executeApplication(\"com.sec.android.appname\");\n",null);
			} catch (BadLocationException e) {
				e.printStackTrace();
			}
		}
	}

	@Override
	public void generateAreaCode() {
		if (null != codeBox) {
			writeTime();
			Caret pos = codeBox.getCodeArea().getCaret();
			try {
				codeBox.getCodeArea().getDocument().insertString(pos.getDot(),
						"new Region(start_x, start_y, width, height)",null);
			} catch (BadLocationException e) {
				e.printStackTrace();
			}
		}
	}

	@Override
	public void tapOnScreen(int x, int y) {
		if (null != codeBox && codeBox.isTapOnTextSelected()) {
			double scaledX;
			double scaledY;

			scaledX = getScaledX(x);
			scaledY = getScaledY(y);

			writeTime();
			Caret pos = codeBox.getCodeArea().getCaret();

			try {
				codeBox.getCodeArea().getDocument().insertString(pos.getDot(),
						"androidDriver.click("+String.format( "%.0f", scaledX )+", "+String.format( "%.0f", scaledY )+");\n",null);
			} catch (BadLocationException e) {
				e.printStackTrace();
			}
		}
	}

	@Override
	public void doubleTapOnScreen(int x, int y)
	{
		
	}

	@Override
	public void swipeOnScreen(int x1, int y1, int x2, int y2, int duration) {
		if (null != codeBox && codeBox.isTapOnTextSelected()) {
			double scaledX1, scaledX2;
			double scaledY1, scaledY2;

			scaledX1 = getScaledX(x1);
			scaledY1 = getScaledY(y1);

			scaledX2 = getScaledX(x2);
			scaledY2 = getScaledY(y2);
			
			writeTime();
			Caret pos = codeBox.getCodeArea().getCaret();

			try {
				codeBox.getCodeArea().getDocument().insertString(pos.getDot(),
						"androidDriver.drag(" + String.format( "%.0f", scaledX1 ) + ", " + String.format( "%.0f", scaledY1 ) + ", "
						+ String.format( "%.0f", scaledX2 ) + ", " + String.format( "%.0f", scaledY2 ) + ", " + duration + ");\n", null);
			} catch (BadLocationException e) {
				e.printStackTrace();
			}
		}
	}


	@Override
	public void longTapOnScreen(int x, int y) {
		if (null != codeBox && codeBox.isTapOnTextSelected()) {
			double scaledX;
			double scaledY;

			scaledX = getScaledX(x);
			scaledY = getScaledY(y);

			writeTime();
			Caret pos = codeBox.getCodeArea().getCaret();

			try {
				codeBox.getCodeArea().getDocument().insertString(pos.getDot(),
						"androidDriver.longClick("+String.format( "%.0f", scaledX )+", "+String.format( "%.0f", scaledY)+");\n",null);
			} catch (BadLocationException e) {
				e.printStackTrace();
			}
		}
	}

	@Override
	protected double getScaledX(int x)
	{
		return x * ((double)deviceWidth / windowWidth);
	}

	@Override
	protected double getScaledY(int y)
	{
		return y * ((double)deviceHeight / windowHeight);
	}
	
	@Override
	public void createCodeBox(int x, int y) {
		codeBox = null;
		prevTime = 0;
		codeBox = new CodeBox(this, "Android", x, y);
		rcpttTextArea = new JTextArea();
	}
	
	@Override
	public void closeCodeBox() {
		codeBox.getFrame().dispose();
		codeBox = null;
	}

	@Override
	public CodeBox getCodeBox() {
		return codeBox;
	}

	@Override
	public boolean isCodeRunning() {
		return isCodeRunning;
	}
	
	@Override
	protected void performCompileRun() {
		codeBox.getConsoleArea().setText("");

		new Thread(new Runnable() {

			@Override
			public void run() {
				isCodeRunning = true;
				codeBox.getPlayButton().setEnabled(false);

				String currentWorkingDirectory1 = System.getProperty("user.dir");
				ProcessBuilder compile, run;
				Process compileProcess, runProcess;

				try {
					if (!isWindows()) {
						compile = new ProcessBuilder("javac", "-d",
								currentWorkingDirectory1 + "/AndroidTC/bin", "-cp", currentWorkingDirectory1
										+ "/AndroidTC/lib/*" + ":" + currentWorkingDirectory1 + "/AndroidTC/src",
								currentWorkingDirectory1 + "/AndroidTC/src/Main.java");
					} else {
						compile = new ProcessBuilder("cmd", "/c", "javac", "-d",
								currentWorkingDirectory1 + "/AndroidTC/bin", "-cp", currentWorkingDirectory1
									+ "/AndroidTC/lib/*" + ";" + currentWorkingDirectory1 + "/AndroidTC/src",
								currentWorkingDirectory1 + "/AndroidTC/src/Main.java");
					}

					compileProcess = compile.start();

					String line = "";
					BufferedReader msgReader = new BufferedReader(new InputStreamReader(compileProcess.getErrorStream()));
					BufferedReader errReader = new BufferedReader(new InputStreamReader(compileProcess.getErrorStream()));

					while ((line = msgReader.readLine()) != null) {
						codeBox.getConsoleArea().setText(codeBox.getConsoleArea().getText()+line + "\n");
					}

					int returnCode = compileProcess.waitFor();

					msgReader.close();
					errReader.close();
					compileProcess.destroy();

					if (returnCode == 0) {
						if (!isWindows()) {
							run = new ProcessBuilder(
									"java", "-cp", currentWorkingDirectory1 + "/AndroidTC/lib/*:"
											+ currentWorkingDirectory1 + "/AndroidTC/bin", "Main", currentWorkingDirectory1, "AutomatorCore.log");
						} else {
							run = new ProcessBuilder("cmd", "/c",
									"java", "-cp", currentWorkingDirectory1 + "/AndroidTC/lib/*;"
											+ currentWorkingDirectory1 + "/AndroidTC/bin", "Main", currentWorkingDirectory1, "AutomatorCore.log");
						}

						runProcess = run.start();
						msgReader = new BufferedReader(new InputStreamReader(runProcess.getInputStream()));
						errReader = new BufferedReader(new InputStreamReader(runProcess.getErrorStream()));

						StringBuffer msgSb = new StringBuffer();
						StringBuffer errSb = new StringBuffer();
						char m = 0 ;
						char e = 0 ;
						while(true) {
							try{
								runProcess.exitValue();
								break;
							}catch(IllegalThreadStateException ex){

							}

							while (msgReader.ready()) {
								m = (char)msgReader.read();
								msgSb.append(m);
								if(m == 10) {
									codeBox.getConsoleArea().setText(codeBox.getConsoleArea().getText()+msgSb.toString()+"");
									msgSb = new StringBuffer();
								}

							}

							while (errReader.ready()) {
								e = (char)errReader.read();
								errSb.append(e);
								if(e == 10) {
									codeBox.getConsoleArea().setText(codeBox.getConsoleArea().getText()+errSb.toString()+"");
									errSb = new StringBuffer();
								}
							}
							Thread.sleep(10);
						}

						msgReader.close();
						errReader.close();
						runProcess.destroy();
					}

				} catch (Exception e) {

					e.printStackTrace();
				}

				isCodeRunning = false;
				codeBox.getPlayButton().setEnabled(true);
			}
		}).start();
	}

	@Override
	public void writeCode() {
		BufferedReader buf = null;
		StringBuffer sb = new StringBuffer();
		try {
			buf = new BufferedReader(new FileReader("AndroidTC/template/Template"));

			if (null != buf) {
				String s = null;

				while ((s = buf.readLine()) != null) {

					sb.append(s + "\n");
				}
			}
			PrintWriter pw = new PrintWriter(new File(WRITE_CODE_FILE_NAME));
			pw.write(sb.toString());
			String code = this.codeBox.getCodeArea().getText().replaceAll("\n", "\n\t\t");
			pw.append("\n\t@Test\n\tpublic void testCases() throws Exception\n\t{ \n\t\t" + code);
			pw.append("\n\t}\n}");
			pw.flush();
			pw.close();
		} catch (Exception e1) {
			e1.printStackTrace();
		}
	}

	@Override
	public void generateRCPTTCode() {
		JFrame frame = new JFrame("RCPTT CODE");
		frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		frame.setLayout(new BorderLayout());

		JPanel codeContent = new JPanel(new GridLayout(1, 1, 1, 2));
		JScrollPane scrollPanel = new JScrollPane();

		final JTextArea rcpttTextArea = new JTextArea();
		rcpttTextArea.setFont(rcpttTextArea.getFont().deriveFont(14.0f));
		final JTextArea sideBar = new JTextArea();
		sideBar.setBackground(Color.LIGHT_GRAY);
		sideBar.setFont(sideBar.getFont().deriveFont(14.0f));
		sideBar.setEditable(false);

		String rcpttText = codeBox.getCodeArea().getText().replaceAll("(?=[]\\[+&|!{}^\"~*?:\\\\])", "\\\\");
		Scanner sc = new Scanner(rcpttText);
		StringBuffer sb = new StringBuffer();
		sb.append("AFEngineRunCode -code \n \t");
		int x = 0; int lineCount = 1;
		while (sc.hasNextLine()) {
			if(x == 0) {
				x++;
			}else {
				sb.append("+\t");
			}
			sb.append(" \"" + sc.nextLine() + "\"  \n ");
			sideBar.append(lineCount++ + "  \n");
		}
		sc.close();
		sideBar.append(lineCount + "  \n");

		rcpttTextArea.setText(sb.toString());
		rcpttTextArea.setEditable(false);

		scrollPanel.getViewport().add(rcpttTextArea);
		scrollPanel.setRowHeaderView(sideBar);
		scrollPanel.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);

		codeContent.add(scrollPanel);
		frame.add(codeContent, BorderLayout.CENTER);

		frame.pack();
		frame.setSize(CodeBox.FRAME_WIDTH, CodeBox.FRAME_HEIGHT - 200);
		frame.setPreferredSize(new Dimension(CodeBox.FRAME_WIDTH, CodeBox.FRAME_HEIGHT - 200));
		frame.setResizable(true);
		frame.setVisible(true);
	}

	@Override
	public void setCursorPosition(int x, int y) {
		 double scaledX;
		 double scaledY;

		scaledX = getScaledX(x);
		scaledY = getScaledY(y);

		 if(null != codeBox) {
			codeBox.setCursorposition(x, y, scaledX, scaledY);
		}
	}

	@Override
	public void updateFileTree(String parent,String newFile) {
		codeBox.updateFileTree(parent, newFile);
	}
}
