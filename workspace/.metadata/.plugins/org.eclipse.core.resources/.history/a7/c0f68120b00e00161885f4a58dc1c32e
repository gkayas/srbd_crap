package application;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.List;

import javax.swing.JTextArea;
import javax.swing.SwingWorker;

import application.Main.MyTask;

public class UploadTask extends SwingWorker<String, String> {
    private JTextArea textArea;

    // A calling application must pass a JTextArea
    String arg;
    public UploadTask(JTextArea textArea, String args) {
        this.textArea = textArea;
        this.arg = arg;
    }
    
	private boolean isWindows() {
		String osName = System.getProperty("os.name");

		if (osName.toLowerCase().contains("windows")) {
			return true;
		}
		return false;
	}


    @Override
    protected String doInBackground() throws IOException, InterruptedException {
    	
    	try {
			if (!isWindows()) {
				System.out.println("Starting exe....");
				run = new ProcessBuilder("java", "-jar",
						"test-jar.jar", arg);
			} else {
				System.out.println("Starting exe....");
				run = new ProcessBuilder("cmd", "/c", "java", "-jar",
						"test-jar.jar", arg);
			}
			
			runProcess = run.start();
			System.out.println("Started exe....");
			BufferedReader msgReader = new BufferedReader(new InputStreamReader(runProcess.getInputStream()));
			BufferedReader errReader = new BufferedReader(new InputStreamReader(runProcess.getErrorStream()));	

			StringBuffer msgSb = new StringBuffer();
			StringBuffer errSb = new StringBuffer();
			char m = 0 ;	
			char e = 0 ;
			while(true) {
				try{
					runProcess.exitValue();
					break;
				}catch(IllegalThreadStateException ex){

				}

				while (msgReader.ready()) {
					System.out.println("reading msg....");
					m = (char)msgReader.read();
					
					msgSb.append(m);
					
					if(m == 10) {
						console.setText(console.getText()+msgSb.toString()+"");
						task.setText(console.getText()+msgSb.toString());
						new Thread(task).start();
						System.out.println("#"+msgSb.toString());
						msgSb = new StringBuffer();
					}

				}

//				while (errReader.ready()) {
//					e = (char)errReader.read();
//					errSb.append(e);
//					if(e == 10) {
//						console.setText(console.getText()+errSb.toString()+"");
//						errSb = new StringBuffer();
//					}
//				}
				Thread.sleep(10);
			}

			msgReader.close();
			errReader.close();
			runProcess.destroy();

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }

    @Override
    protected void done() {
        if (isCancelled())
            publish("Cancelled !");
            else
        publish("Done !");
    }


    @Override
    protected void process(List<String> strings) {
        StringBuilder strBuilder = new StringBuilder();
        for (String str : strings) {
                strBuilder.append(str).append('\n');
            }
        textArea.append(strBuilder.toString());
    }
    
    
    private void runAndUpdateConsole( String arg) {
		ProcessBuilder run;
		Process runProcess;
		System.out.println("Inside run and update....");
		try {
			if (!isWindows()) {
				System.out.println("Starting exe....");
				run = new ProcessBuilder("java", "-jar",
						"test-jar.jar", arg);
			} else {
				System.out.println("Starting exe....");
				run = new ProcessBuilder("cmd", "/c", "java", "-jar",
						"test-jar.jar", arg);
			}
			
			runProcess = run.start();
			System.out.println("Started exe....");
			BufferedReader msgReader = new BufferedReader(new InputStreamReader(runProcess.getInputStream()));
			BufferedReader errReader = new BufferedReader(new InputStreamReader(runProcess.getErrorStream()));	

			StringBuffer msgSb = new StringBuffer();
			StringBuffer errSb = new StringBuffer();
			char m = 0 ;	
			char e = 0 ;
			while(true) {
				try{
					runProcess.exitValue();
					break;
				}catch(IllegalThreadStateException ex){

				}

				while (msgReader.ready()) {
					System.out.println("reading msg....");
					m = (char)msgReader.read();
					
					msgSb.append(m);
					
					if(m == 10) {
						console.setText(console.getText()+msgSb.toString()+"");
						task.setText(console.getText()+msgSb.toString());
						new Thread(task).start();
						System.out.println("#"+msgSb.toString());
						msgSb = new StringBuffer();
					}

				}

//				while (errReader.ready()) {
//					e = (char)errReader.read();
//					errSb.append(e);
//					if(e == 10) {
//						console.setText(console.getText()+errSb.toString()+"");
//						errSb = new StringBuffer();
//					}
//				}
				Thread.sleep(10);
			}

			msgReader.close();
			errReader.close();
			runProcess.destroy();

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
