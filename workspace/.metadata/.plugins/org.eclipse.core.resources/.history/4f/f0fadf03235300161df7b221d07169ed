import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import com.hp.gagawa.java.elements.Body;
import com.hp.gagawa.java.elements.H1;
import com.hp.gagawa.java.elements.Head;
import com.hp.gagawa.java.elements.Html;
import com.hp.gagawa.java.elements.Style;
import com.hp.gagawa.java.elements.Table;
import com.hp.gagawa.java.elements.Td;
import com.hp.gagawa.java.elements.Text;
import com.hp.gagawa.java.elements.Th;
import com.hp.gagawa.java.elements.Title;
import com.hp.gagawa.java.elements.Tr;

public class Main {
	static String SOURCE_XML_PATH = "tmp_results/results.junit.xml";
	static String FAILLIST_PATH = "results/faillist"; 
	static String RESULT_FILE_PATH = "results/result.html"; 
	
	public static void main(String [] args) {
		try {
			
			
			Html html = new Html();

			Head head = new Head();
			Title title = new Title();
			Style style = new Style("");
			style.appendText("table { "+
					"color: #333;"+
					"font-family: Helvetica, Arial, sans-serif;"+
					"width: 85%; "+
					"border-collapse: "+
					"collapse; border-spacing: 0; "+
					"}"+
					"td, th { "+
					"border: 1px solid transparent;"+
					"height: 30px; "+
					"transition: all 0.3s; "+
					"}"+
					"th {"+
					"background: #DFDFDF; "+
					"font-weight: bold;"+
					"}"+
					"td {"+
					"background: #FAFAFA;"+
					"text-align: center;"+
					"}"+
					"tr:nth-child(even) td { background: #F1F1F1; }   "+
					"tr:nth-child(odd) td { background: #FEFEFE; }  "+
					"tr:hover { background: #CCC; color: #55F; } ");
			
			head.appendChild(style);
			
			
			title.appendChild( new Text("SDK Automation Report.") );
			head.appendChild( title );
			html.appendChild( head );
			Body body = new Body();
			html.appendChild( body );
			

			H1 h1 = new H1();
			h1.appendChild( new Text("Failed TCs") );
			H1 h2 = new H1();
			h2.appendChild( new Text("Passed TCs") );
			
			Table tableFailed = new Table();
			tableFailed.setAttribute("id", "failTable");
			
			Table tablePassed = new Table();
			tablePassed.setAttribute("id", "passTable");
			
			body.appendChild(h1);
			body.appendChild(tableFailed);
			body.appendChild(h2);
			body.appendChild(tablePassed);
			
			Tr rowF = new Tr();
			Th th1 = new Th();
			th1.appendChild(new Text("Tc Name"));
			rowF.appendChild(th1);
			Th th2 = new Th();
			th2.appendChild(new Text("Status"));
			rowF.appendChild(th2);
			Th th3 = new Th();
			th3.appendChild(new Text("Time"));
			rowF.appendChild(th3);
			Th th4 = new Th();
			th4.appendChild(new Text("Message"));
			rowF.appendChild(th4);
			
			tableFailed.appendChild(rowF);
			
			Tr rowP = new Tr();
			Th th1P = new Th();
			th1P.appendChild(new Text("Tc Name"));
			rowP.appendChild(th1);
			Th th2P = new Th();
			th2P.appendChild(new Text("Status"));
			rowP.appendChild(th2);
			Th th3P = new Th();
			th3P.appendChild(new Text("Time"));
			rowP.appendChild(th3);
			
			tablePassed.appendChild(rowP);
			run(tableFailed, tablePassed);
//			reRun(tableFailed, tablePassed);
			
			writeToFile(html.write(), RESULT_FILE_PATH);
			
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private static void run( Table tableFailed, Table tablePassed) throws IOException {
		Document doc = Jsoup.parse(new File(SOURCE_XML_PATH), "UTF-8");
		Elements elements = doc.select("testcase");
		
		PrintWriter pw = new PrintWriter(new FileWriter(new File(FAILLIST_PATH)));
		for (Element element : elements) {
			Tr row = new Tr();
			row.setAttribute("id", element.attr("name"));
			
			Td name = new Td();
			name.appendChild(new Text(element.attr("name")));
			
			Td time = new Td();
			time.appendChild(new Text(element.attr("time")));

			Elements children = element.children();
			Td status = new Td();
			Td msg = new Td();
			
			row.appendChild(name);
			row.appendChild(status);
			row.appendChild(time);
			
			if(children.size() > 0) {
				row.appendChild(msg);
				pw.append(element.attr("name")+"\n");
				status.appendChild(new Text("Fail"));
				for (Element child : children) {
					
					msg.appendChild(new Text(child.attr("message")));
				}
				tableFailed.appendChild(row);
			} else {
				status.appendChild(new Text("Pass"));
				tablePassed.appendChild(row);
			}
			
			
			
			System.out.println("########################################");
		}
		pw.flush();
		pw.close();

		
		System.out.println("RUN DONE");
	}
	
	private static void reRun(Table tableFailed, Table tablePassed) throws IOException {
		Document doc = Jsoup.parse(new File(RESULT_FILE_PATH), "UTF-8");
		Elements tables = doc.select("table");
		Element passtable,failTable; 
		for (Element table : tables) {
			if(table.attr("id").equals("passTable")) {
				passtable = table;
			} else if (table.attr("id").equals("failTable")) {
				failTable = table;
			}
		}
		
		Document doc = Jsoup.parse(new File(SOURCE_XML_PATH), "UTF-8");
		Elements elements = doc.select("testcase");
		for (Element element : elements) {
			
		}
	}
	
	private static void writeToFile(String content, String path) {
		try {
			PrintWriter pw = new PrintWriter(new FileWriter(new File(path)));
			
			pw.write(content);
			pw.flush();
			pw.close();
			
			
		} catch (IOException e) {
			
			e.printStackTrace();
		}
		
	}
	
}
